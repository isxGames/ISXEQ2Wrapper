<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ISXEQ2Wrapper</name>
    </assembly>
    <members>
        <member name="T:EQ2.ISXEQ2.Ability">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to abilities.
            An 'ability' is defined as any skill found in your knowledge book. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Ability.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._allowRaid">
            <summary>
            Cache of AllowRaid
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._backDropIconID">
            <summary>
            Cache of BackDropIconID
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Ability.Class(System.Int32)">
            <summary>
            Returns the class at the index
            </summary>
            <param name="index">index</param>
            <returns>class</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Ability.Class(System.String)">
            <summary>
            Returns the class by class name
            </summary>
            <param name="name">class name</param>
            <returns>class</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._concentrationCost">
            <summary>
            Cache of ConcentrationCost
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._description">
            <summary>
            Cache of Description
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._dissonanceCost">
            <summary>
            Cache of DissonanceCost
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._dissonanceCostPerTick">
            <summary>
            Cache of DissonanceCostPerTick
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._doesNotExpire">
            <summary>
            Cache of DoesNotExpire
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Ability.Effect(System.Int32)">
            <summary>
            Returns the ability effect at the specified index
            </summary>
            <param name="index">index</param>
            <returns>ability effect</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._effectRadius">
            <summary>
            Cache of EffectRadius
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._groupRestricted">
            <summary>
            Cache of GroupRestricted
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._healthCost">
            <summary>
            Cache of HealthCost
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._healthCostPerTick">
            <summary>
            Cache of HealthCostPerTick
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._hOIconID">
            <summary>
            Cache of HOIconID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._isBeneficial">
            <summary>
            Cache of IsBeneficial
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._mainIconID">
            <summary>
            Cache of MainIconID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._maxAOETargets">
            <summary>
            Cache of MaxAOETargets
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._maxDuration">
            <summary>
            Cache of MaxDuration
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._maxRange">
            <summary>
            Cache of MaxRange
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._minDuration">
            <summary>
            Cache of MinDuration
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._minRange">
            <summary>
            Cache of MinRange
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._numClasses">
            <summary>
            Cache of NumClasses
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._numEffects">
            <summary>
            Cache of NumEffects
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._powerCost">
            <summary>
            Cache of PowerCost
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._powerCostPerTick">
            <summary>
            Cache of PowerCostPerTick
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._savageryCost">
            <summary>
            Cache of SavageryCost
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._savageryCostPerTick">
            <summary>
            Cache of SavageryCostPerTick
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._spellBookType">
            <summary>
            Cache of SpellBookType
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._targetType">
            <summary>
            Cache of TargetType
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Ability._tier">
            <summary>
            Cache of Tier
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Ability.Examine">
            <summary>
            Examines the ability
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Ability.Use">
            <summary>
            Uses the ability
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.AllowRaid">
            <summary>
            Returns TRUE if the ability can be used on raid members
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.BackDropIconID">
            <summary>
            Ability Back Drop ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.CastingTime">
            <summary>
            The casting time of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.ConcentrationCost">
            <summary>
            The concentration cost of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.Description">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.DissonanceCost">
            <summary>
            Ability DissonanceCost (Channelers)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.DissonanceCostPerTick">
            <summary>
            Ability Dissonance Cost Per Tick (Channelers)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.DoesNotExpire">
            <summary>
            Returns TRUE if the ability does not expire
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.EffectRadius">
            <summary>
            The radius of the ability effect
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.GroupRestricted">
            <summary>
            Returns TRUE if the ability is restricted to group members only
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.HealthCost">
            <summary>
            The health cost of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.HealthCostPerTick">
            <summary>
            The health cost per tick of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.HOIconID">
            <summary>
            The heroic opportunity icon ID of the ability. -1 indicates no icon.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.ID">
            <summary>
            Ability ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.IsBeneficial">
            <summary>
            Returns TRUE if the ability is beneficial (buff)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.IsQueued">
            <summary>
            Returns TRUE if the ability is queued
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.IsReady">
            <summary>
            Returns TRUE if the ability is ready
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.MainIconID">
            <summary>
            The main icon ID of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.MaxAOETargets">
            <summary>
            Max number of AOE targets
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.MaxDuration">
            <summary>
            The maximum duration of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.MaxRange">
            <summary>
            The max range of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.MinDuration">
            <summary>
            Min duration of ability (Caution: something not working right)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.MinRange">
            <summary>
            Min Range of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.Name">
            <summary>
            The name of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.NumClasses">
            <summary>
            The number of classes that can use an ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.NumEffects">
            <summary>
            The number of effects on the item
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.PowerCost">
            <summary>
            The power cost of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.PowerCostPerTick">
            <summary>
            Power cost per tick of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.Range">
            <summary>
            The range of the ability. Same as MaxRange;
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.RecastTime">
            <summary>
            The recast time of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.RecoveryTime">
            <summary>
            The recovery time of the abilitys
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.SavageryCost">
            <summary>
            The savagery cost of the ability (Beastlords)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.SavageryCostPerTick">
            <summary>
            The savagery cost per tick of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.SpellBookType">
            <summary>
            Spell Book Type of the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.TargetType">
            <summary>
            Ability target type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.Tier">
            <summary>
            The ability tier
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.TimeRemaining">
            <summary>
            The time remaining on the ability
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.TimeUntilReady">
            <summary>
            The time until the ability is ready. (Preferred over TimeRemaining)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Ability.ToLink">
            <summary>
            This will recreate the actual link used with in game chat channels (used typically with eq2echo or eq2execute).
            </summary>
            <returns>link</returns>
        </member>
        <member name="T:EQ2.ISXEQ2.AbilityEffect">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to ability effects. 
            This is used to get information about Effects on Abilities.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.AbilityEffect.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.AbilityEffect._percentSuccess">
            <summary>
            Cache of PercentSuccess
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.AbilityEffect._indentation">
            <summary>
            Cache of indentation
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.AbilityEffect._description">
            <summary>
            Cache of Description
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.AbilityEffect.PercentSuccess">
            <summary>
            Success chance of effect
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.AbilityEffect.Indentation">
            <summary>
            Visually, what 'bulleted' layer is it in the listing 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.AbilityEffect.Description">
            <summary>
            Effect description
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Achievement">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to Achievements.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Achievement.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Achievement._description">
            <summary>
            Cache of description
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Achievement._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Achievement._level">
            <summary>
            Cache of Level
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Achievement._maxLevel">
            <summary>
            Cache of MaxLevel
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Achievement._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Achievement._pointCostPerLevel">
            <summary>
            Cache of PointCostPerLevel
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Achievement._reqLevelToBuy">
            <summary>
            Cache of ReqLevelToBuy
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Achievement.Examine">
            <summary>
            Examines the achievement
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.Description">
            <summary>
            Achievement Description
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.ID">
            <summary>
            Achievement ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.Level">
            <summary>
            Achievement level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.MaxLevel">
            <summary>
            Max Level of the Achievement
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.Name">
            <summary>
            Achievement name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.PointCostPerLevel">
            <summary>
            Achievement point cost per level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.ReqLevelToBuy">
            <summary>
            Requred level to purchase the Achievement
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Achievement.ToAbility">
            <summary>
            Returns the achievement as an ability
            </summary>
            <returns>ability</returns>
        </member>
        <member name="T:EQ2.ISXEQ2.Actor">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to entities within the world.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.CheckCollision">
            <summary>
            Checks collision between you and this actor
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.CheckCollision(System.Single,System.Single,System.Single)">
            <summary>
            Checks between the actor and the given point.
            </summary>
            <param name="toX">X</param>
            <param name="toY">Y</param>
            <param name="toZ">Z</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._class">
            <summary>
            Cache of Class
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._collisionRadius">
            <summary>
            Cache of CollisionRadius
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._collisionScale">
            <summary>
            Collision Scale
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.ConColor(System.Boolean)">
            <summary>
            Con Color
            </summary>
            <param name="asRGB">as RGB</param>
            <returns>Con Color</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.Effect(System.Int32)">
            <summary>
            Retrieves the Effect at the index (1 to NumEffects). Must InitializeEffects()
            if effects may have changed.
            </summary>
            <param name="index">index</param>
            <returns>Effect</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.Effect(System.String)">
            <summary>
            Retireves the Effect by name.
            </summary>
            <param name="name">name</param>
            <returns>Effect</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._effectiveLevel">
            <summary>
            Cache of EffectiveLevel
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._encounterSize">
            <summary>
            Cache of EncounterSize
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._faction">
            <summary>
            Cache of Faction
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._factionStanding">
            <summary>
            Cache of Faction Standing
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._flyingUseMount">
            <summary>
            Cache of FlyingUsingMount
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._gender">
            <summary>
            Cache of Gender
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._guild">
            <summary>
            Cache of Guild
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._highlightOnMouseHover">
            <summary>
            Cache on HighlightOnMouseHover
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._inMyGroup">
            <summary>
            Cache of InMyGroup
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._interactable">
            <summary>
            Cache of Interactable
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isAFK">
            <summary>
            Cache of ISAFK
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isAPet">
            <summary>
            Cache of IsAPet
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isBanker">
            <summary>
            Cache of IsBanker
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isCamping">
            <summary>
            Cache of IsCamping
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isChest">
            <summary>
            Cache of IsChest
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isClimbing">
            <summary>
            Cache of IsClimbing
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isEpic">
            <summary>
            Cache of IsEpic
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isHeroic">
            <summary>
            Cache of IsHeroic
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.IsInSameEncounter(System.Int32)">
            <summary>
            Returns TRUE if the actor with the give ID is in the same encounter.
            </summary>
            <param name="id"></param>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isLFG">
            <summary>
            Cache of IsLFG
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isLFW">
            <summary>
            Cache of IsLFW
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isMerchant">
            <summary>
            Cache of IsMerchant
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isMyPet">
            <summary>
            Cache of IsMyPet
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isNamed">
            <summary>
            Cache of IsNamed
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._isSolo">
            <summary>
            Cache of IsSolo
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._lastName">
            <summary>
            Cache of LastName
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._level">
            <summary>
            Cache of Level
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._onFlyingMount">
            <summary>
            Cache of OnFlyingMount
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._race">
            <summary>
            Cache of Race
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._speed">
            <summary>
            Cache of Speed
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._suffixTitle">
            <summary>
            Cache of SuffixTitle
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._swimmingSpeedMod">
            <summary>
            Cache of SwimmingSpeedMod
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._targetRingRadius">
            <summary>
            Cache of TargetRingRadius
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor._type">
            <summary>
            Cache of Type
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.DoFace">
            <summary>
            Faces the actor.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.DoTarget">
            <summary>
            Targets the actor.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.DoubleClick">
            <summary>
            Excellent for activating doors.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.InitializeEffects">
            <summary>
            Used to retrieve effects data for this actor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.Location(EQ2.ISXEQ2.Actor.CommandType,System.String)">
            <summary>
            This method will create a location in your locations database 
            (which will save to your isxeq2locations.xml file) creating a label for you.
            Please understand that this only works well for stationary actors.
            </summary>
            <param name="action">add or delete</param>
            <param name="notes">notes</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Actor.WaypointTo">
            <summary>
            Creates a waypoint to the actor.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.CanTurn">
            <summary>
            Returns TRUE if the actor can turn. NOTE: If you're 'mezzed' you are 
            both rooted and you cannot turn. Use similar logic to determine other 
            situations such as being 'stunned' etc.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.CollisionRadius">
            <summary>
            Collision Radius
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.CollisionScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Difficulty">
            <summary>
            Returns the encounter difficulty as a range of -3 to 3. 
            -3 == three down arrows, 0 == no arrows, 3 == three up arrows
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Distance">
            <summary>
            3D Distance to this actor
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Distance2D">
            <summary>
            Distance to this actor
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.EffectiveLevel">
            <summary>
            Mentored Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.EncounterSize">
            <summary>
            Returns the size of the encounter. This number will not change throughout the fight.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Faction">
            <summary>
            Less than -4 is KOS, -3 is threatening, -2 is dubious, -1 is apprehensive, etc. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.FactionStanding">
            <summary>
            Possible Faction Standings are: Ally, Warmly, Kindly, Amiable, Indifferent, Apprehensive, Dubious, Threatening, and KOS.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.FlyingUsingMount">
            <summary>
            Returns TRUE if currently flying in the air using a flying mount (the mount is visible)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Guild">
            <summary>
            Guild
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Heading">
            <summary>
            Heading. Returns heading as degrees (think compass), to a precision of 2 decimal places.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.HeadingTo">
            <summary>
            Better known as bearing.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Health">
            <summary>
            Returns health as a percentage.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.HighlightOnMouseHover">
            <summary>
            Interactable
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.InCombatMode">
            <summary>
            Returns TRUE if the actor is in combat. Mutually exclusive with
            IsCrouching and IsSitting
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.InMyGroup">
            <summary>
            Return TRUE if the actor is in the players group
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Interactable">
            <summary>
            Interactable
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsAFK">
            <summary>
            Returns TRUE if the actor is AFK
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsAggro">
            <summary>
            Returns TRUE if the actor is a aggro
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsAPet">
            <summary>
            Returns TRUE if the actor is a pet
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsBackingUp">
            <summary>
            Returns TRUE if the actor is backing up. Mutually exclusive with IsStrafingLeft,
            IsStrafingRight, and IsIdle.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsBanker">
            <summary>
            Returns TRUE if the actor is a banker
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsCamping">
            <summary>
            Returns TRUE if the actor is camping
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsChest">
            <summary>
            Returns TRUE if the actor is a chest
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsClimbing">
            <summary>
            Returns TRUE if the actor is climbing
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsCrouching">
            <summary>
            Returns TRUE if the actor is crouching. Mutually exclusive with
            InCombatMode and IsSitting 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsDead">
            <summary>
            Returns TRUE if the actor is dead
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsEncounterBroken">
            <summary>
            Returns TRUE if the encounter is broken.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsEpic">
            <summary>
            Returns TRUE if the actor is Epic.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsFalling">
            <summary>
            Returns TRUE if the actor is falling or jumping.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsFD">
            <summary>
            Returns TRUE if the actor is feign death.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsHeroic">
            <summary>
            Returns TRUE if the actor is Heroic.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsIdle">
            <summary>
            Returns TRUE if the actor is idle. Mutually exclusive with
            IsBackingUp, IsStrafingLeft, and IsStrafingRight.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsInvis">
            <summary>
            Return TRUE if the actor is invis. (alias for IsStealthed)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsJumping">
            <summary>
            Returns TRUE if the actor is jumping.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsLFG">
            <summary>
            Returns TRUE if the actor is Looking for Group.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsLFW">
            <summary>
            Returns TRUE is the actor is Looking for Work.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsLinkdead">
            <summary>
            Returns TRUE if the actor is linkdead.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsLocked">
            <summary>
            Returns TRUE if the actor is engaged in a locked encounter.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsMerchant">
            <summary>
            Returns TRUE if the actor is a merchant. (includes Mender)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsMyPet">
            <summary>
            Returns TRUE if the actor is my pet.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsNamed">
            <summary>
            Returns TRUE if the actor is a Named.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsRooted">
            <summary>
            Returns TRUE if the actor is rooted. NOTE: If you're 'mezzed' you are 
            both rooted and you cannot turn. Use similar logic to determine other 
            situations such as being 'stunned' etc.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsRunning">
            <summary>
            Returns TRUE if the actor is running. Mutually exclusive with
            IsWalking and IsSprinting.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsSitting">
            <summary>
            Returns TRUE if the actor is sitting. Mutually exclusive with
            InCombatMode and IsCrouching.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsSolo">
            <summary>
            Returns TRUE if the actor is solo. (NOT an encounter)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsSprinting">
            <summary>
            Returns TRUE if the actor is sprinting. Mutually exclusive
            with IsRunning and IsWalking.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsStealthed">
            <summary>
            Returns TRUE if the actor is stealthed. (alias for IsInvis)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsStrafingLeft">
            <summary>
            Returns TRUE if the actor is strafing left. Mutually exclusive 
            with IsBackingUp, IsStrafingRight, and IsIdle.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsStrafingRight">
            <summary>
            Returns TRUE if the actor is strafing right. Mutually exclusive
            with IsBackingUp, IsStrafingLeft, and IsIdle.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsSwimming">
            <summary>
            Returns TRUE if the actor is swimming.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.IsWalking">
            <summary>
            Returns TRUE if the actor is walking. Mutually exclusive
            with IsRunning and IsSprinting.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.LastName">
            <summary>
            Last Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Loc">
            <summary>
            Location (or position in Point3f)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.NumEffects">
            <summary>
            The number of effects on the actor. Use with Effects(int).
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.OnCarpet">
            <summary>
            Returns TRUE if the actor is on a carpet. Mutually exclusive
            with OnHorse and OnGriffin.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.OnFlyingMount">
            <summary>
            Returns TRUE if currently on a flying mount, whether on the ground or in the air
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.OnGriffin">
            <summary>
            Returns TRUE if the actor is flying on a griffin. (Old World, intra zone travel like horses and sokokar)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.OnGriffon">
            <summary>
            Returns TRUE if the actor is flying on a griffon. (Old World, intra zone travel, e.g. Thundering Steppes)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.OnHorse">
            <summary>
            Returns TRUE if the actor is on a horse. (Old World, intra zone travel. e.g. in G Fay)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Pet">
            <summary>
            Actor's pet, if any.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Power">
            <summary>
            Returns power as a percentage.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Race">
            <summary>
            Race
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Speed">
            <summary>
            Returns the run speed percent enhancement on the actor.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.SuffixTitle">
            <summary>
            Returns the suffix title of the actor if it exists, or NULL if it does not.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.SwimmingSpeedMod">
            <summary>
            Swimming Speed Modifier
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Target">
            <summary>
            Target, if any.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.TargetRingRadius">
            <summary>
            Target Ring Radius
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.ThreatToMe">
            <summary>
            Actor's threat to me.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.ThreatToNext">
            <summary>
            Threat to next person down on the hate list.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.ThreatToPet">
            <summary>
            Threat to actor's pet.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.ToActor">
            <summary>
            Useful for iterating the character.Group array.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Type">
            <summary>
            Actor type.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Velocity">
            <summary>
            Velocity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.WhoFollowing">
            <summary>
            Returns the name of the actor that the actor is following.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.WhoFollowingID">
            <summary>
            Returns the ID of the actor the actor is following.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.X">
            <summary>
            Position X-coordinate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Y">
            <summary>
            Position Y-coordinate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Actor.Z">
            <summary>
            Position Z-coordinate
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Actor.CommandType">
            <summary>
            Command Type
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor.CommandType.Add">
            <summary>
            Command Type Add
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Actor.CommandType.Delete">
            <summary>
            Command Type Delete
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Character">
            <summary>
            This Data Type includes all of the data available to ISXEQ2 that can be gathered from the character Information structure. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Ability(System.UInt32)">
            <summary>
            Returns an ability based on ID
            </summary>
            <param name="id">ID</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Ability(System.String)">
            <summary>
            Retrieves an ability based on name.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._archetype">
            <summary>
            Cache of Archetype
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._baseAgility">
            <summary>
            Cache of BaseAgility
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._baseIntelligence">
            <summary>
            Cache of BaseIntelligence
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._baseStamina">
            <summary>
            Cache of BaseStamina
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._baseStrength">
            <summary>
            Cache of BaseStrength
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._baseWisdom">
            <summary>
            Cache of BaseWisdom
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.CheckCollision(System.Single,System.Single,System.Single)">
            <summary>
            Checks between the character and the given point.
            </summary>
            <param name="toX">X</param>
            <param name="toY">Y</param>
            <param name="toZ">Z</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._class">
            <summary>
            Cache of Class
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.CountEffects(EQ2.ISXEQ2.Character.EffectType)">
            <summary>
            The number of effects. (Beneficial, Detrimental, All)
            </summary>
            <param name="type">effect type</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.CustomInventory(System.Int32)">
            <summary>
            Retrieves the item at the specified index of the CustomInventoryArray
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.CustomInventory(System.String[])">
            <summary>
            Retrieves the item based on the search arguments from the CustomInventoryArray
            </summary>
            <param name="args">search arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Effect(System.Int32,EQ2.ISXEQ2.Character.EffectType)">
            <summary>
            Retrieves the effect of the given type at the specified index. (Beneficial, Detrimental, All)
            </summary>
            <param name="type">effect type</param>
            <param name="index">index</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Effect(System.String,EQ2.ISXEQ2.Character.EffectType)">
            <summary>
            Retrieves the effect of the given type at the specified index. (Beneficial, Detrimental, All(
            </summary>
            <param name="type">type</param>
            <param name="name">name</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Equipment(System.String[])">
            <summary>
            Retrieves an equipped item that matches the search criteria
            </summary>
            <param name="args">search criteria</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._gender">
            <summary>
            Cache of Gender
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.GetAbilities">
            <summary>
            Returns an IEnumerable of all abilities.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.GetEquipment">
            <summary>
            Returns an IEnumerable of all equipped items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.GetGameData(System.String)">
            TODO: Research Me.GetGameData
            <summary>
            Returns the EQ2UIElement at the specified path.
            </summary>
            <param name="path">path</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.GetInventory">
            <summary>
            Returns an IEnumerable of all items (including bank) NOT EQUIPPED.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.GetInventoryAtHand">
            <summary>
            Returns an IEnumerable of all items (excluding bank) NOT EQUIPPED
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Group(System.Int32)">
            <summary>
            Returns the group member at the specified index between 1 and 5.
            The player is at index 0. Me.Group(0) is the same as Me.ToActor
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Group(System.String)">
            <summary>
            Returns the group member matching the name provided.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.HeadingTo(System.Single,System.Single,System.Single)">
            <summary>
            Returns the heading you would need to face to reach the target point. Better known as bearing. 
            </summary>
            <param name="toX">X</param>
            <param name="toY">Y</param>
            <param name="toZ">Z</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Inventory(System.String[])">
            <summary>
            Retrieves the inventory item based on the search criteria
            </summary>
            <param name="args">criteria</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._level">
            <summary>
            Cache of Level
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Maintained(System.Int32)">
            <summary>
            Returns the maintained effect at the index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Maintained(System.String)">
            <summary>
            Returns the maintained effect by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._maxConc">
            <summary>
            Cache of MaxConc
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._maxDissonance">
            <summary>
            Cache of MaxDissonance
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._mentoringXPAdj">
            <summary>
            Cache of MentoringXPAdj
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Merchandise(System.Int32)">
            <summary>
            Returns the object the character is capable of selling at the specified index. (1 to NumItemsICanSell)
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Merchandise(System.String)">
            <summary>
            Returns the object the character is capable of selling based on name.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.NumEffects(EQ2.ISXEQ2.Character.EffectType)">
            <summary>
            The number of effects. (Beneficial, Detrimental, All)
            </summary>
            <param name="type">type</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._race">
            <summary>
            Cache of Race
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Raid">
            <summary>
            Number of people in the raid. If you are not in a raid, this returns 0.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Raid(System.Int32)">
            <summary>
            Returns the raid member by Actor ID or Raid Member number
            </summary>
            <param name="number">ID or member number</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Raid(System.Int32,System.Int32)">
            <summary>
            Returns the raid member by group and member numbers
            </summary>
            <param name="group">group number</param>
            <param name="member">member number</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Recipe(System.Int32)">
            <summary>
            Returns the recipe at the specified index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Recipe(System.UInt32)">
            <summary>
            Returns the recipe with the ID provided
            </summary>
            <param name="id">ID</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Recipe(System.String)">
            <summary>
            Returns the recipe with the name provided
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._subClass">
            <summary>
            Cache of SubClass
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._tSArchetype">
            <summary>
            Cache of TSArchetype
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character._tSClass">
            <summary>
            Cache of TSClass
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Vending(System.Int32)">
            <summary>
            Retrieves the vending container at the index (1 to 6)
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Vending(System.String)">
            <summary>
            Retrieves the vending container by exact name
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.BankDeposit(EQ2.ISXEQ2.Character.CoinType,System.Int32,System.Boolean)">
            <summary>
            Deposits the specified quantity of coin into the player's bank. May be used
            to transfer money from the shared bank as well.
            </summary>
            <param name="type">type of coin</param>
            <param name="amount">amount of coin</param>
            <param name="useSharedBank">use shared bank as source</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.BankWithdraw(EQ2.ISXEQ2.Character.CoinType,System.Int32)">
            <summary>
            Withdraws the selected quantity of coin from the player's bank.
            </summary>
            <param name="type">type of coin</param>
            <param name="amount">amount of coin</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.CreateCustomInventoryArray(EQ2.ISXEQ2.Character.InvType)">
            <summary>
            Creates a custom inventory array of the specified type.
            </summary>
            <param name="type">inventory type</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.DepositIntoHouseEscrow(System.Int32,System.Int32)">
            <summary>
            Deposits the specified amount of copper and status into house escrow
            </summary>
            <param name="coin">copper</param>
            <param name="status">status</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.Face(System.Single)">
            <summary>
            Rotates the character to face the supplied heading (0 to 360)
            </summary>
            <param name="heading"></param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.GuildBankDeposit(System.Int32,System.Int32)">
            <summary>
            Deposits the specified amount of silver in the designated guild bank
            </summary>
            <param name="bank">bank number (1-4)</param>
            <param name="amount">amount to deposit in silver</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.GuildBankWithdraw(System.Int32,System.Int32)">
            <summary>
            Withdraws the specified amount of silver from the designated guild bank
            </summary>
            <param name="bank">bank number (1-4)</param>
            <param name="amount">amount to withdraw in silver</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.InitializeEffects">
            <summary>
            Initializes character effects
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.ResetZoneTimer(System.String)">
            <summary>
            Attempts to reset the time for the zone. This may require to have opened
            the zone reuse window at least once in your current session before working 
            properly (use /togglezonereuse)
            </summary>
            <param name="name">zone name</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.SharedBankDeposit(EQ2.ISXEQ2.Character.CoinType,System.Int32,System.Boolean)">
            <summary>
            Deposits the amount of the coin type provided into the bank. Optional third parameter will
            move the coin from the regular bank to the shared bank if true.
            </summary>
            <param name="type">coin type</param>
            <param name="amount">coin amount</param>
            <param name="useBank">use bank as source</param>
            <returns></returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.SharedBankWithdraw(EQ2.ISXEQ2.Character.CoinType,System.Int32)">
            <summary>
            Withdraws the specified coin type and amount from the shared bank.
            </summary>
            <param name="type">coin type</param>
            <param name="amount">coin amount</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Character.TakeAllVendingCoin">
            <summary>
            Removes all coin from all vendors at once.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Agility">
            <summary>
            Agility
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.APExp">
            <summary>
            Achievement Point Experience
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Arcane">
            <summary>
            Arcane Affliction Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ArcaneResist">
            <summary>
            Arcane Resist
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ArcaneResistPct">
            <summary>
            Arcane Resist Percentage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Archetype">
            <summary>
            Archetype (fighter, priest, scout, mage)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.AtCharSelect">
            <summary>
            Returns TRUE if at the Character Select Screen. Only works
            after logging all the way in once.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.AutoAttackOn">
            <summary>
            Returns TRUE if auto attack is on.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.BankSlotsFree">
            <summary>
            Actual bank slots free and bank container slots free 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.BaseAgility">
            <summary>
            Base Agility
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.BaseIntelligence">
            <summary>
            Base Intelligence
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.BaseStamina">
            <summary>
            Base Stamina
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.BaseStrength">
            <summary>
            Base Strength
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.BaseWisdom">
            <summary>
            Base Wisdom
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Breath">
            TODO: Find out what Me.Breath is.
            <summary>
            Breath
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.CastingSpell">
            <summary>
            Returns TRUE if casting a spell.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Class">
            <summary>
            Class (warrior, brawler, crusader, sorcerer, enchanter, summoner, druid,
            cleric, shaman, shaper, bard, predator, rogue, animalist)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.CombatExpEnabled">
            <summary>
            Returns TRUE if Combat Experience is enabled.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Copper">
            <summary>
            Copper
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.CountMaintained">
            <summary>
            The number of maintained effects.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Cursed">
            <summary>
            Cursed Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.CursorActor">
            <summary>
            This member will return an 'actor' object of whatever is currently underneath your mouse cursor.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.CustomInventoryArraySize">
            <summary>
            Returns the size of the CustomInventoryArray
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Dissipation">
            <summary>
            Dissipation
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Dissonance">
            <summary>
            Dissonance
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.DissonanceRemaining">
            <summary>
            Dissonance Remaining
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.EffectiveLevel">
            <summary>
            Effective Level (Mentored or Chrono)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Elemental">
            <summary>
            Elemental Affliction Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ElementalResist">
            <summary>
            Elemental Resist
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ElementalResistPct">
            <summary>
            Elemental Resist Percent
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Exp">
            <summary>
            Experience
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ExpDebt">
            TODO: Find out why Me.ExpDebt returns NULL
            <summary>
            Experience Debt
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ExpPoints">
            <summary>
            Experience Points
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ExpPointsToLevel">
            <summary>
            Experience Points Needed to Reach the Next Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Gold">
            <summary>
            Gold
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.GroupCount">
            <summary>
            Returns the number of members in the group from 1 to 6.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Grouped">
            <summary>
            Returns TRUE if the character is Grouped
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.GuildPrivacyOn">
            <summary>
            Returns TRUE if guild privacy is on
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Heading">
            <summary>
            Heading. Returns heading as degrees (think compass), to a precision of 2 decimal places.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Health">
            <summary>
            Returns health as a percentage.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.HealthRegen">
            <summary>
            Health Regeneration
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IgnoringAll">
            <summary>
            Returns TRUE if user is "ignoring all" as toggled with the 'eq2ignore all' command.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InFirstPersonView">
            <summary>
            Returns TRUE if the camera is in First Person
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InThirdPersonView">
            <summary>
            Returns TRUE if the camera is in Third Person
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InCombat">
            <summary>
            Returns TRUE if the character is in combat
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InGameWorld">
            <summary>
            Returns TRUE if the character is in the game world. Only
            works if you have logged in completely once.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InitializingEffects">
            <summary>
            Returns TRUE if Initializing Effects on the character.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InRaid">
            <summary>
            Returns TRUE if the character is in a raid.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Intelligence">
            <summary>
            Intelligence
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InventorySlotsFree">
            <summary>
            Actual inventory slots free and inventory container slots free 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.InWater">
            <summary>
            Returns TRUE if the character is in the water
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsAfflicted">
            <summary>
            Returns TRUE if the character is afflicted by arcane, noxious, etc.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsAFK">
            <summary>
            Returns TRUE if the character is flagged AFK
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsAnonymous">
            <summary>
            Returns TRUE if the character is flagged anonymous
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsCamping">
            <summary>
            Returns TRUE if the character is camping
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsDecliningDuelInvites">
            <summary>
            Returns TRUE if the character is declining duel invites
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsDecliningGroupInvites">
            <summary>
            Returns TRUE if the character is declining group invites
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsDecliningGuildInvites">
            <summary>
            Returns TRUE if the character is declining guild invites
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsDecliningRaidInvites">
            <summary>
            Returns TRUE if the character is declining raid invites
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsDecliningTradeInvites">
            <summary>
            Returns TRUE if the character is declining trade invites
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsHated">
            <summary>
            Returns TRUE if the character is on a hate list
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsInPVP">
            <summary>
            Returns TRUE if the character is engaged in PvP combat
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsLFG">
            <summary>
            Returns TRUE if the character is looking for group
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsLFW">
            <summary>
            Returns TRUE if the character is looking for work
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsMoving">
            <summary>
            Returns TRUE if the character is moving
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsRolePlaying">
            <summary>
            Returns TRUE if the character is roleplaying
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.IsSitting">
            <summary>
            Returns TRUE if the character is sitting
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.MaxAPs">
            <summary>
            Maximum Achievement Points
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.MaxConc">
            <summary>
            Max Concentration
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.MaxDissonance">
            <summary>
            Max Dissonance
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.MaxHealth">
            <summary>
            Max Health
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.MaxPower">
            <summary>
            Max Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.MentoringXPAdj">
            <summary>
            Mentoring XP Adjustment
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NextFreeInvContainer">
            <summary>
            Returns an integer which is the ID of the first available container in the inventory that has an open slot 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Noxious">
            <summary>
            Noxious Affliction Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NoxiousResist">
            <summary>
            Noxious Resist
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NoxiousResistPct">
            <summary>
            Noxious Resist Percent
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NumAbilities">
            <summary>
            Returns the number of abilities your character currently has in his/her knowledge book. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NumItemsICanSell">
            <summary>
            Returns the number of items that the character is capable of selling 
            (ie, the number of items in the inventory minus the number of NO VALUE and NO TRADE items.) 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NumRecipes">
            <summary>
            Returns the number of recipes your character currently has in his/her recipe book. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NumVendingContainers">
            <summary>
            Returns the number of vending containers
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.NumVendors">
            <summary>
            Returns the number of vending containers
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Pet">
            <summary>
            Returns the character's pet, if any.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Platinum">
            <summary>
            Platinum
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Power">
            <summary>
            Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.PowerRegen">
            <summary>
            Power Regen
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Race">
            <summary>
            Race
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.RaidCount">
            <summary>
            Number of people in the raid. If you are not in a raid, this returns 0.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.RaidGroupNum">
            <summary>
            Returns the character's raid group number
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.RangedAutoAttackOn">
            <summary>
            Returns TRUE if the ranged auto attack is on
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.SharedBankSlotsFree">
            <summary>
            Returns the number of shared bank slots free
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Silver">
            <summary>
            Silver
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Stamina">
            <summary>
            Stamina
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Strength">
            <summary>
            Strength
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.SubClass">
            <summary>
            Sub Class. What we normally think of as Class. (Guardian, Mystic, etc...)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TargetLOS">
            <summary>
            Returns TRUE if you have Line of Sight to your current target.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TimeToCampOut">
            <summary>
            Returns the time until camp out. Starts at 20, and updates every 5 seconds.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.ToActor">
            <summary>
            Returns as Actor
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TotalEarnedAPs">
            <summary>
            Total Earned APs
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TotalVendingCapacity">
            <summary>
            Total slot capacity of all the characters vending containers combined. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Trauma">
            <summary>
            Trauma Affliction Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSArchetype">
            <summary>
            Trade Skill Archetype (artisan, etc.)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSClass">
            <summary>
            Trade Skill Class (outfitter, etc.)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSExp">
            <summary>
            Trade Skill Experience
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSExpDebt">
            <summary>
            Trade Skill Experience Debt
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSExpPoints">
            <summary>
            Trade Skill Experience Points
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSExpPointsToLevel">
            <summary>
            Trade Skill Experience Points Needed to Reach the Next Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSLevel">
            <summary>
            Trade Skill Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSSubClass">
            <summary>
            Trade Skill SubClass (armorer, etc.)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.TSVitality">
            <summary>
            Trade Skill Vitality
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.UsedConc">
            <summary>
            Amount of Concentration Used
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.VendingCapacityFree">
            <summary>
            Number of vending container slots currently free for use 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.VendingCapacityUsed">
            <summary>
            Number of vending container slots currently being used 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Vitality">
            <summary>
            Experience Vitality
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.WaterDepth">
            <summary>
            Water Depth
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Wisdom">
            <summary>
            Wisdom
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.X">
            <summary>
            X-coordinate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Y">
            <summary>
            Y-coordinate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Character.Z">
            <summary>
            Z-coordinate
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Character.EffectType">
            <summary>
            Effect Types
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.EffectType.Beneficial">
            <summary>
            Beneficial
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.EffectType.Detrimental">
            <summary>
            Detrimental
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.EffectType.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Character.CoinType">
            <summary>
            Coin Types
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.CoinType.Copper">
            <summary>
            Coin Type Copper
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.CoinType.Silver">
            <summary>
            Coin Type Silver
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.CoinType.Gold">
            <summary>
            Coin Type Gold
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.CoinType.Platinum">
            <summary>
            Coin Type Platinum
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Character.InvType">
            <summary>
            Inventory Types
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.InvType.NonBankOnly">
            <summary>
            Not in bank or shared bank
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.InvType.BankOnly">
            <summary>
            Only in bank or shared bank
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Character.InvType.All">
            <summary>
            All items
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.ChoiceWindow">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to Choice windows. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ChoiceWindow.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ChoiceWindow.DoChoice1">
            <summary>
            Selects Choice1
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.ChoiceWindow.DoChoice2">
            <summary>
            Selects Choice2
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.ChoiceWindow.Choice1">
            <summary>
            First Choice
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ChoiceWindow.Choice2">
            <summary>
            Second Choice
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ChoiceWindow.Text">
            <summary>
            Choice window text
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ChoiceWindow.ToEQ2UIPage">
            <summary>
            Returns the choice window as an EQ2UIPage
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Class">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related 
            to information about the classes that can use abilities or items.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Class.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Class._level">
            <summary>
            Cache of Level
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Class._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Class.Level">
            <summary>
            Required level of this class
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Class.Name">
            <summary>
            Class name
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Component">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to tradeskill recipe components.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Component.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Component._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Component._quantity">
            <summary>
            Cache of Quantity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Component.Name">
            <summary>
            Component name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Component.Quantity">
            <summary>
            Quantity of component required
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Component.QuantityOnHand">
            <summary>
            The quantity of the compoent on hand
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Consignment">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to items that can be bought from brokers. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Consignment._level">
            <summary>
            Cache of Level
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Consignment._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Consignment._value">
            <summary>
            Cache of Value
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.Buy">
            <summary>
            Buys 1 of the items in consignment
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.Buy(System.Int32)">
            <summary>
            Buys the quantity specified from the consignment.
            If # is specified, it is assumed to be the quantity of items to buy.
            If the value is large, it will buy as many as are in the selected stack. 
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.Examine">
            <summary>
            This brings up the 'examine window' for the given item. 
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.List">
            <summary>
            Lists any item for sale that is currently in your consignment listing. 
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.Remove">
            <summary>
            Removes a consignment item from the vendor and places it in your inventory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.Remove(System.Int32)">
            <summary>
            Removes the quantity of a consignment item from the vendor and places it in your inventory.
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.SetPrice(System.Single)">
            <summary>
            Sets the price of any consignment item that is currently in your consignment listing. 
            The price is one value in silver pieces and it CAN be a float value (eg, 1.20 == 1 silver, 20 copper).
            </summary>
            <param name="price">price in silver as float</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.SetPrice(System.Int32)">
            <summary>
            Sets the price of any consignment item that is currently in your consignment listing.
            The price is one value in silver pieces.
            </summary>
            <param name="price">price in silver</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Consignment.Unlist">
            <summary>
            Unlists any consignment item that is currently for sale. 
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.BasePrice">
            <summary>
            The price of the item, without broker commission, in silver pieces.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.BasePriceString">
            <summary>
            The price of the item, without broker commission, in the following format: #p,#g,#s,#c
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.IsListed">
            <summary>
            Returns TRUE is the item is listed
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.Level">
            <summary>
            Level of the consignment
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.LinkID">
            <summary>
            Link ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.Market">
            <summary>
            Possible values: "Qeynos" "Freeport" "Kelethin" "Haven" "Neriak" (or "Unknown" which should not be possible) 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.Name">
            <summary>
            Consignment name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.Price">
            <summary>
            The price of the item, including broker commission, in silver pieces. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.Quantity">
            <summary>
            Item quantity in consignment
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.SerialNumber">
            <summary>
            Consignment Serial Number
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.ToLink">
            <summary>
            This will recreate the actual link used with in game chat channels (used typically with eq2echo or eq2execute).
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Consignment.Value">
            <summary>
            This is the price (in silver pieces) that an NPC merchant would buy this item from you. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ContainerWindow.#ctor">
            <summary>
            *** Notes: 
            *** 1.  A "ContainerWindow" is any window that says 'Container' on it's name tab.  As of right now, it refers most often to the
            ***     'Harvest Supply Depot'.
            *** 2.  You may only have one "ContainerWindow" open at a time.
            *** 3.  The "ContainerWindow" TLO and related datatypes are only available when the container window is OPEN.  (However, it does 
            ***     not matter how far away you are from said container.)
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ContainerWindow.Item(System.Int32)">
            <summary>
            The 'Item' MEMBER accepts either an index between 1 and ${ContainerWindow.NumItems}
            </summary>
            <param name="index"></param>
            <returns>a ContainerWindowItem object</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.ContainerWindow.RemoveItem(System.Int32,System.Int32)">
            <summary>
            Lavishscript Example: "ContainerWindow:RemoveItem[${ContainerWindow.Item[artichoke].ID},5]"
            </summary>
            <param name="containeritemID"></param>
            <param name="Quantity"></param>
            <returns>true or false</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.ContainerWindowItem.ID">
            <summary>
            Note:  The 'ID' MEMBER of the 'containerwindowitem' datatype is used exlusively for the "RemoveItem" METHOD of the 'containerwindow' datatype.  
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Effect">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to effects that are on the current player character.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Effect.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Effect._backDropID">
            <summary>
            Cache of BackDropID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Effect._description">
            <summary>
            Cache of Description
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Effect._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Effect._mainIconID">
            <summary>
            Cache of MainIconID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Effect._maxDuration">
            <summary>
            Cache of MaxDuration
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Effect._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Effect.Cancel">
            <summary>
            Cancels the effect, if possible
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Effect.Examine">
            <summary>
            Examines the effect
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.BackDropIconID">
            <summary>
            Back Drop ID of Effect
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.CurrentIncrements">
            <summary>
            Current Increments on Effect
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.Description">
            <summary>
            Effect Description
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.Duration">
            <summary>
            This is the current duration of the effect in seconds. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.ID">
            <summary>
            Effect ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.MainIconID">
            <summary>
            Effect main icon ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.MaxDuration">
            <summary>
            This is the maximum duration of the effect in seconds.
            Note: If you log off and back on with 'duration' buffs/effects, 
            will notice that the 'MaxDuration' will change to reflect that. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Effect.Name">
            <summary>
            Effect Name
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2">
            <summary>
            This DataType includes miscellaneous data that is available to ISXEQ2 that does not fit into any other ISXEQ2 DataType
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.CheckCollision(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a boolean stating whether or not two points (1 and 2) have Line of Sight.
            Please note that this checks a direct line between two points for a collision.
            This is subject to false positives or negativesdue to railings (seeing between the rails,
            false negative) or staircases (top to bottom, false positive).
            </summary>
            <param name="x1">x-coordinate of 1</param>
            <param name="y1">y-coordinate of 1</param>
            <param name="z1">z-coordinate of 1</param>
            <param name="x2">x-coordinate of 2</param>
            <param name="y2">y-coordinate of 2</param>
            <param name="z2">z-coordinate of 2</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.HeadingTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the true heading from the "from" point (1) to the "to" point (2).
            </summary>
            <param name="fromX">x-coordinate of 1</param>
            <param name="fromY">y-coordinate of 1</param>
            <param name="fromZ">z-coordinate of 1</param>
            <param name="toX">x-coordinate of 2</param>
            <param name="toY">y-coordinate of 2</param>
            <param name="toZ">z-coordinate of 2</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.PersistentZoneID(System.String)">
            <summary>
            Returns the Persistent Zone ID for a given zone name
            </summary>
            <param name="zoneName">zone name</param>
            <returns>zone id</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.AcceptPendingQuest">
            <summary>
            Accepts the pending quest
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.AcceptReward">
            <summary>
            Accepts the current reward
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.ConfirmZoneTeleporterDestination">
            <summary>
            Confirms the highlighted teleporter destination
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.CreateCustomActorArray(System.String[])">
            <summary>
            Creates an array of actors based on the sort criteria submitted
            </summary>
            <param name="args">sort method, radius, type</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.DeclinePendingQuest">
            <summary>
            Declines the pending quest
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.GetActors">
            <summary>
            Gets all actors in range
            </summary>
            <returns>Enumerable sorted by distance</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.GetActors(System.String[])">
            <summary>
            Gets all actors in range that meet the search criteria
            </summary>
            <param name="args"></param>
            <returns>Enumerable</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.GetPersistentZones">
            <summary>
            Returns a list of Persistent Zones
            </summary>
            <returns>Enumerable</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.SetAmbientLight(System.Single)">
            <summary>
            Sets the ambient light to the requested amount
            </summary>
            <param name="ambientPct">float value between 0 and 100</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.SetMasterVolume(System.Single)">
            <summary>
            Sets the master sound volume
            </summary>
            <param name="volPct">float value between 0 and 100</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2.ShowAllOnScreenAnnouncements">
            <summary>
            Toggles the onscreen announcment that combat xp is disabled (if it is disabled)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.CustomActorArraySize">
            <summary>
            Returns the size of the custom actor array.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOCurrentWheelSlot">
            <summary>
            Returns the last known active Heroic Opportunity wheel slot
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HODescription">
            <summary>
            Returns the description of the Heroic Opportunity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOIconID1">
            <summary>
            Returns the IconID of slot 1
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOIconID2">
            <summary>
            Returns the IconID of slot 2
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOIconID3">
            <summary>
            Returns the IconID of slot 3
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOIconID4">
            <summary>
            Returns the IconID of slot 4
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOIconID5">
            <summary>
            Returns the IconID of slot 5
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOIconID6">
            <summary>
            Returns the IconID of slot 6
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOLastManipulator">
            <summary>
            Returns the last actor to initialize/manipulate the Heroic Opportunity window/wheel
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOName">
            <summary>
            Returns the name of the Heroic Opportunity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOTimeElapsed">
            <summary>
            Returns the total time elapsed on the current Heroic Opportunity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOTimeLimit">
            <summary>
            Returns the total time allowed for the cuurent Heroic Opportunity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOTimeRemaining">
            <summary>
            Returns the time remaining on the current Heroic Opportunity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOWheelID">
            <summary>
            Returns the ID# of the wheel
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOWheelState">
            <summary>
            Returns the last known state of the Heroic Opportunity wheel
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOWindowActive">
            <summary>
            Returns a boolean indicating whether or not the Heroic Opportunity window is active
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.HOWindowState">
            <summary>
            Current state of the Heroic Opportunity window
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.InboxMailCount">
            <summary>
            Returns the number of mail items in the character's inbox.
            The mailbox must have been opened at least once.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.MasterVolume">
            <summary>
            Returns the current master volume as a percentage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.NumRadars">
            <summary>
            Returns the number of active radars
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.PendingQuestDescription">
            <summary>
            Returns the description of the quest currently being offered
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.PendingQuestName">
            <summary>
            Returns the name of the quest currently being offered.
            Returns "none" if no quest is currently being offered.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.RewardPending">
            <summary>
            Returns a boolean identifying whether or not a reward is pending
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.ServerName">
            <summary>
            Returns the name of the server. This is only available when in the game proper.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2.Zoning">
            <summary>
            Returns an integer indicating the zoning status of the character. -1 = unsure, 0 = not zoning, 1 = zoning
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event">
            <summary>
            This contains Event Handlers and Raisers for all EQ2Events
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.#ctor">
            <summary>
            Constructor. Attaches all events.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.Finalize">
            <summary>
            Deconstructor. Detaches all events.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnActorSpawned(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_Actor Spawned Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnActorDespawned(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ActorDespawned Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnCastingStarted(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_CastingStarted Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnCastingEnded(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_CastingEnded Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnActorPowerChange(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ActorPowerChange Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnActorHealthChange(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ActorHealthChange Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnActorStanceChange(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ActorStanceChange Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnActorTargetChange(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ActorTargetChange Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnHOWindowStateChanged(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_OnHOWindowStateChanged Event Raiser
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnExamineAchievement(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ExamineAchievement Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnQuestOffered(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onQuestOffered Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnReplyDialogAppeared(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ReplyDialogAppeared Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnExamineItemWindowAppeared(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_ExamineItemWindowAppeared Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnLootWindowAppeared(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onLootWindowAppeared Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnInventoryUpdate(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onInventoryUpdate Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnQuestUpdate(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onQuestUpdate Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnFinishedZoning(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_FinishedZoning Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnStartedZoning(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_StartedZoning Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnTellIgnored(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onTellIgnored Event Raiser
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnIncomingChatText(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onIncomingChatText Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnSendMailComplete(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onSendMailComplete Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnChoiceWindowAppeared(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onChoiceWindowAppeared Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnAnnouncement(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onAnnouncement Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnIncomingText(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onIncomingText Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnRewardWindowAppeared(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onRewardWindowAppeared Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnMeAfflicted(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onMeAfflicted Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnGroupMemberAfflicted(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onGroupMemberAfflicted Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.OnRaidMemberAfflicted(System.Object,LavishScriptAPI.LSEventArgs)">
            <summary>
            EQ2_onRaidMemberAfflicted Event Raiser
            </summary>
            <param name="sender">sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.Attach(System.String,System.EventHandler{LavishScriptAPI.LSEventArgs})">
            <summary>
            Attaches the specified event to the specified handler.
            </summary>
            <param name="eventToAttach">event to attach</param>
            <param name="handler">handler</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Event.Detach(System.String,System.EventHandler{LavishScriptAPI.LSEventArgs})">
            <summary>
            Detaches the specified event from the specified handler.
            </summary>
            <param name="eventToDetach">event to detach</param>
            <param name="handler">handler</param>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ActorSpawned">
            <summary>
            EQ2_ActorSpawned Event Handler 
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ActorDespawned">
            <summary>
            EQ2_ActorDespawned Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.CastingStarted">
            <summary>
            EQ2_CastingStarted Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.CastingEnded">
            <summary>
            EQ2_CastingEnded Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ActorPowerChange">
            <summary>
            EQ2_ActorPowerChange Event Handler. Requires ISXEQ2.EnableActorEvents().
            Disabled by default.
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ActorHealthChange">
            <summary>
            EQ2_ActorHealthChange Event Handler. Requires ISXEQ2.EnableActorEvents().
            Disabled by default.
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ActorStanceChange">
            <summary>
            EQ2_ActorStanceChange Event Handler. Requires ISXEQ2.EnableActorEvents().
            Disabled by default.
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ActorTargetChange">
            <summary>
            EQ2_ActorTargetChange Event Handler. Requires ISXEQ2.EnableActorEvents().
            Disabled by default.
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.HOWindowStateChanged">
            <summary>
            EQ2_OnHOWindowStateChanged Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ExamineAchievement">
            <summary>
            EQ2_ExamineAchievement Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.QuestOffered">
            <summary>
            EQ2_onQuestOffered Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ReplyDialogAppeared">
            <summary>
            EQ2_ReplyDialogAppeared Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ExamineItemWindowAppeared">
            <summary>
            EQ2_ExamineItemWindowAppeared Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.LootWindowAppeared">
            <summary>
            EQ2_onLootWindowAppeared Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.InventoryUpdate">
            <summary>
            EQ2_onInventoryUpdate Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.QuestUpdate">
            <summary>
            EQ2_onQuestUpdate Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.FinishedZoning">
            <summary>
            EQ2_FinishedZoning Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.StartedZoning">
            <summary>
            EQ2_StartedZoning Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.TellIgnored">
            <summary>
            EQ2_onTellIgnored Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.IncomingChatText">
            <summary>
            EQ2_onIncomingChatText Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.SendMailComplete">
            <summary>
            EQ2_onSendMailComplete Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.ChoiceWindowAppeared">
            <summary>
            EQ2_onChoiceWindowAppeared Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.Announcement">
            <summary>
            EQ2_onAnnouncement Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.IncomingText">
            <summary>
            EQ2_onIncomingText Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.RewardWindowAppeared">
            <summary>
            EQ2_onRewardWindowAppeared Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.MeAfflicted">
            <summary>
            EQ2_onMeAfflicted Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.GroupMemberAfflicted">
            <summary>
            EQ2_onGroupMemberAfflicted Event Handler
            </summary>
        </member>
        <member name="E:EQ2.ISXEQ2.EQ2Event.RaidMemberAfflicted">
            <summary>
            EQ2_onRaidMemberAfflicted Event Handler
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ActorSpawnedEventArgs">
            <summary>
            EQ2_ActorSpawned Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorSpawnedEventArgs.ID">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorSpawnedEventArgs.Name">
            <summary>
            Actor Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorSpawnedEventArgs.Level">
            <summary>
            Actor Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorSpawnedEventArgs.Type">
            <summary>
            Actor Type
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ActorDespawnedEventArgs">
            <summary>
            EQ2_ActorDespawned Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorDespawnedEventArgs.ID">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorDespawnedEventArgs.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs">
            <summary>
            EQ2_ActorPowerChange Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.ID">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.Name">
            <summary>
            Actor Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.Type">
            <summary>
            Actor Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.OldPower">
            <summary>
            Actor Old Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.NewPower">
            <summary>
            Actor New Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.Distance">
            <summary>
            Distance to Actor
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.IsInGroup">
            <summary>
            Returns TRUE if the actor is in the characters group
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorPowerChangeEventArgs.IsInRaid">
            <summary>
            Returns TRUE if the actor is in the characters raid
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs">
            <summary>
            EQ2_ActorHealthChange Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.ID">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.Name">
            <summary>
            Actor Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.Type">
            <summary>
            Actor Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.OldHealth">
            <summary>
            Actor Old Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.NewHealth">
            <summary>
            Actor New Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.Distance">
            <summary>
            Distance to Actor
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.IsInGroup">
            <summary>
            Returns TRUE if the actor is in the characters group
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorHealthChangeEventArgs.IsInRaid">
            <summary>
            Returns TRUE if the actor is in the characters raid
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs">
            <summary>
            EQ2_ActorStanceChange Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.ID">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.Name">
            <summary>
            Actor Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.Type">
            <summary>
            Actor Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.OldStance">
            <summary>
            Actor Old Stance (IN_COMBAT, AT_PEACE, DEAD)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.NewStance">
            <summary>
            Actor New Power (IN_COMBAT, AT_PEACE, DEAD)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.TargetID">
            <summary>
            Target ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.Distance">
            <summary>
            Distance to Actor
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.IsInGroup">
            <summary>
            Returns TRUE if the actor is in the characters group
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorStanceChangeEventArgs.IsInRaid">
            <summary>
            Returns TRUE if the actor is in the characters raid
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs">
            <summary>
            EQ2_ActorTargetChange Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.ID">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.Name">
            <summary>
            Actor Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.Type">
            <summary>
            Actor Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.OldTargetID">
            <summary>
            Actor Old Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.NewTargetID">
            <summary>
            Actor New Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.Distance">
            <summary>
            Distance to Actor
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.IsInGroup">
            <summary>
            Returns TRUE if the actor is in the characters group
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ActorTargetChangeEventArgs.IsInRaid">
            <summary>
            Returns TRUE if the actor is in the characters raid
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ExamineAchievementEventArgs">
            <summary>
            EQ2_ExamineAchievement Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ExamineAchievementEventArgs.Type">
            <summary>
            Achievement Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ExamineAchievementEventArgs.ID">
            <summary>
            Achievement ID
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.QuestOfferedEventArgs">
            <summary>
            Event Agruments for EQ2_onQuestOffered
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestOfferedEventArgs.Name">
            <summary>
            Quest Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestOfferedEventArgs.Description">
            <summary>
            Quest Description
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestOfferedEventArgs.Level">
            <summary>
            Quest Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestOfferedEventArgs.Status">
            <summary>
            Status Reward
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ReplyDialogAppearedEventArgs">
            <summary>
            EQ2_ReplyDialogAppeared Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ReplyDialogAppearedEventArgs.WindowID">
            <summary>
            Window ID
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.ExamineItemWindowAppearedEventArgs">
            <summary>
            EQ2_ExamineItemWindowAppeared Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ExamineItemWindowAppearedEventArgs.ItemName">
            <summary>
            Item Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.ExamineItemWindowAppearedEventArgs.WindowID">
            <summary>
            Window ID
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.LootWindowAppearedArgs">
            <summary>
            Event Arguments for EQ2_onLootWindowAppeared
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.LootWindowAppearedArgs.LootWindowID">
            <summary>
            Loot Window ID
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.QuestUpdateEventArgs">
            <summary>
            Event Arguments for EQ2_onQuestUpdate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestUpdateEventArgs.QuestID">
            <summary>
            Quest ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestUpdateEventArgs.QuestName">
            <summary>
            Quest Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestUpdateEventArgs.QuestCurrentZone">
            <summary>
            Quest Current Zone
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestUpdateEventArgs.QuestCategory">
            <summary>
            Quest Category
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestUpdateEventArgs.QuestDescription">
            <summary>
            Quest Description
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.QuestUpdateEventArgs.QuestProgressText">
            TODO:Troubleshoot QuestUpdateEventArgs ProgressText
            <summary>
            Quest Progess Text
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.FinishedZoningEventArgs">
            <summary>
            EQ2_FinishedZoning Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.FinishedZoningEventArgs.TimeInSeconds">
            <summary>
            Returns a string of the time in seconds required to zone
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.TellIgnoredEventArgs">
            <summary>
            EQ2_onTellIgnored Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.TellIgnoredEventArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.TellIgnoredEventArgs.Speaker">
            <summary>
            Speaker
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs">
            <summary>
            EQ2_onIncomingChatText
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.ChatType">
            <summary>
            Chat Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.Speaker">
            <summary>
            Speaker
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.Target">
            <summary>
            Target
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.SpeakerIsNPC">
            <summary>
            Returns TRUE if the speaker is an NPC
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.ChannelName">
            <summary>
            Channel Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.SpeakerID">
            <summary>
            Speaker ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingChatTextEventArgs.TargetID">
            <summary>
            Target ID
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.AnnouncementEventArgs">
            <summary>
            EQ2_onAnnouncement Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.AnnouncementEventArgs.Text">
            <summary>
            Announcement Text
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.AnnouncementEventArgs.SoundType">
            <summary>
            Sound Type
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.IncomingTextEventArgs">
            <summary>
            EQ2_onIncomingText Event Args
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.IncomingTextEventArgs.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.MeAfflictedEventArgs">
            <summary>
            EQ2_onMeAfflicted Event Args 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MeAfflictedEventArgs.TraumaCounter">
            <summary>
            Trauma Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MeAfflictedEventArgs.ArcaneCounter">
            <summary>
            Arcane Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MeAfflictedEventArgs.NoxiousCounter">
            <summary>
            Noxious Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MeAfflictedEventArgs.ElementalCounter">
            <summary>
            Elemental Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MeAfflictedEventArgs.CurseCounter">
            <summary>
            Curse Counter
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Event.MemberAfflictedEventArgs">
            <summary>
            EQ2_onGroupMemberAfflicted and EQ2_onRaidMemberAfflicted Event Args 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MemberAfflictedEventArgs.ActorID">
            <summary>
            Afflicted Actor ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MemberAfflictedEventArgs.TraumaCounter">
            <summary>
            Trauma Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MemberAfflictedEventArgs.ArcaneCounter">
            <summary>
            Arcane Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MemberAfflictedEventArgs.NoxiousCounter">
            <summary>
            Noxious Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MemberAfflictedEventArgs.ElementalCounter">
            <summary>
            Elemental Counter
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Event.MemberAfflictedEventArgs.CurseCounter">
            <summary>
            Curse Counter
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Location">
            <summary>
            This DataType provides control over and information about Saved EQ2 Locations. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Location.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Location._label">
            <summary>
            Cache of Label
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Location._notes">
            <summary>
            Cache of Notes
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Location._x">
            <summary>
            Cache of X
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Location._y">
            <summary>
            Cache of Y
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Location._z">
            <summary>
            Cache of Z
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Location._zone">
            <summary>
            Cache of Zone
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Location.Delete">
            <summary>
            Deletes the eq2location
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Location.Face">
            <summary>
            Rotates the character towards the eq2location
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Location.WaypointTo">
            <summary>
            Creates an ingame waypoint to the eq2location
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Location.Label">
            <summary>
            The label appended to the location
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Location.Notes">
            <summary>
            Notes associated with this location
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Location.X">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Location.Y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Location.Z">
            <summary>
            z-coordinate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Location.Zone">
            <summary>
            The zone of the eq2location
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2Mail">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to an individual email
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._body">
            <summary>
            Cache of Body
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._copper">
            <summary>
            Cache of Copper
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._gold">
            <summary>
            Cache of Gold
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._platinum">
            <summary>
            Cache of Platinum
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._recipient">
            <summary>
            Cache of recipient
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._sender">
            <summary>
            Cache of Sender
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._silver">
            <summary>
            Cache of Silver
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2Mail._subject">
            <summary>
            Cache of Subject
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.AddCopper(System.Int32)">
            <summary>
            Adds copper to an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of ccopper to add</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.AddGold(System.Int32)">
            <summary>
            Add gold to an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of gold to add</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.AddPlatinum(System.Int32)">
            <summary>
            Adds platinum to an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of platinum to add</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.AddSilver(System.Int32)">
            <summary>
            Adds silver to an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of silver to add</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.AppendBody(System.String)">
            <summary>
            Adds additional text to the body of an email. Requires email to be composing.
            </summary>
            <param name="text">text to append</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.AppendRecipient(System.String)">
            <summary>
            Adds an additional recipient to an email. Requires email to be composing.
            </summary>
            <param name="text">text to append</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.AppendSubject(System.String)">
            <summary>
            Adds additional text to the subject of an email. Requires email to be composing.
            </summary>
            <param name="text">text to append</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.Cancel">
            <summary>
            Cancels the email.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.Delete">
            <summary>
            Deletes the email. Does not require the email to be opened or composing.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.Open">
            <summary>
            Opens the email. Does not require the email to be opened or composing.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.ReceiveGifts">
            <summary>
            Extracts the attached gift from the email. Does not require the email to be opened or composing.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.RemoveCopper(System.Int32)">
            <summary>
            Removes copper from an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of copper to remove</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.RemoveGift">
            <summary>
            Removes the gift from an email. Requires email to be composing.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.RemoveGold(System.Int32)">
            <summary>
            Removes gold from an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of gold to remove</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.RemovePlatinum(System.Int32)">
            <summary>
            Removes platinum from an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of platinum to remove</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.RemoveSilver(System.Int32)">
            <summary>
            Removes silver from an email. Requires email to be composing.
            </summary>
            <param name="value">the amount of silver to remove</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2Mail.Send">
            <summary>
            Sends the email. Requires email to be composing.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Body">
            <summary>
            The body of the email
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Copper">
            <summary>
            Amount of copper attached to the email. Only works if mail is opened or composing.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Gift">
            <summary>
            Should return the item datatype for the attachment
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Gold">
            <summary>
            Amount of gold attached to the email. Only works if mail is opened or composing.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.ID">
            <summary>
            Mail ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Platinum">
            <summary>
            Amount of platinum attached to the email. Only works if mail is opened or composing.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Recipient">
            <summary>
            Name of the recipient
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Sender">
            <summary>
            Returns the name of the sender
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Silver">
            <summary>
            Amount of silver attached to the email. Only works if mail is opened or composing.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2Mail.Subject">
            <summary>
            The subject of the email
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2UIElement">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related 
            to UI Elements such as buttons, icons, checkboxes, UI Text, composites and others. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.Child(EQ2.ISXEQ2.EQ2UIElement.ElementType,System.Int32)">
            <summary>
            Retrieves the specified Child. This data member only works for Composite UI element types.
            This data member uses two arguments. The first is the 'type' the element, which can be 
            either "Button", "Icon", "Text", "CheckBox", "Page", "DataSourceContainer", or "Composite". 
            The second argument is the index location of the child within the composite's children array.
            This number will be between 1 and NumChildren.  
            </summary>
            <param name="type">type</param>
            <param name="index">index</param>
            <returns>EQ2UIElement</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.ChildType(System.Int32)">
            <summary>
            Retrieves the ChildType at the specified index.
            This data member only works for Composite UI element types. 
            This data member uses one argument. This argument is a 
            number between 1 and NumChildren representing the location in the composite's children array. 
            </summary>
            <param name="index">index</param>
            <returns>ElementType</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.GetDynamicData(System.String)">
            <summary>
            Retrieves the dynamic data UI element at the specified path
            </summary>
            <param name="path">path</param>
            <returns>EQ2UIElement</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement._label">
            <summary>
            Cache of Label
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement._shortLabel">
            <summary>
            Cache of ShortLabel
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement._text">
            <summary>
            Cache of Text
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.AddToTextBox(System.String)">
            <summary>
            Adds text to textbox. This should work for pretty much any "text entry" box in the EQ2 UI.
            Only works for Textbox type eq2uielements.
            </summary>
            <param name="text">text</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.ClickButton">
            <summary>
            Clicks a button. Only works for Button type eq2uielements.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.DoubleLeftClick">
            <summary>
            Performs a double left click of the eq2uielement.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.HighlightRow(System.Int32)">
            <summary>
            Highlights the specified row in the list
            </summary>
            <param name="row">row</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.LeftClick">
            <summary>
            LeftClicks the eq2uielement
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIElement.RightClick">
            <summary>
            RightClicks the eq2uielement
            </summary>
            <returns></returns>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.IsChecked">
            <summary>
            Returns true if the element is checked. This data member only works for Checkbox and DynamicData UI element types.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.IsEnabled">
            <summary>
            This data member has only been tested to work with 'button' types thus far.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.IsSet">
            <summary>
            This member is an exact replica of IsChecked. 
            This data member only works for Checkbox and DynamicData UI element types.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.Label">
            <summary>
            Label. This data member only works for Checkbox, Text, DynamicData, and Button UI element types.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.NumChildren">
            <summary>
            Number of children. This data member only works for Composite UI element types.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.Parent">
            <summary>
            Parent
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.Percent">
            <summary>
            ProgressBar completion. For ProgressBar types only.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.RowHighlighted">
            <summary>
            Highlighted list row. "List" types only.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.ShortLabel">
            <summary>
            Short Label. This data member only works for DynamicData UI element types.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.Text">
            <summary>
            Text. This data member only works for Checkbox, Text, DynamicData, and Button UI element types.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.ToAbility">
            <summary>
            Returns the ability associated with the icon. For Icons only.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIElement.Type">
            <summary>
            Element Type
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2UIElement.ElementType">
            <summary>
            UI Element Types
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.Button">
            <summary>
            Element Type Button
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.Text">
            <summary>
            Element Type Text
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.TextBox">
            <summary>
            Element Type TextBox
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.CheckBox">
            <summary>
            Element Type CheckBox
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.Page">
            <summary>
            Element Type Page
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.Composite">
            <summary>
            Element Type Composite
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.Icon">
            <summary>
            Element Type Icon
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.DataSourceContainer">
            <summary>
            Element Type DataSourceContainer
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.DynamicData">
            <summary>
            Element Type DynamicData
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.VolumePage">
            <summary>
            Element Type Volume Page
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.DataSource">
            <summary>
            Element Type DataSource
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.List">
            <summary>
            Element Type Lists
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.EQ2UIElement.ElementType.Unknown">
            <summary>
            Element Type Unknown
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.EQ2UIPage">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to User Interface Pages. 
            Many times, this refers to UI Windows; however, it is not restricted to that.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIPage.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.EQ2UIPage.Child(EQ2.ISXEQ2.EQ2UIElement.ElementType,System.String)">
            <summary>
            The Child UI Element
            </summary>
            <param name="type">type</param>
            <param name="name">name</param>
            <returns>EQ2UIElement</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.EQ2UIPage.IsVisible">
            <summary>
            Returns TRUE if the window is visible
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.ExamineItemWindow">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to Item Examine windows. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ExamineItemWindow.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ExamineItemWindow.TextVector(System.Int32)">
            <summary>
            Returns a "text" eq2uielement type
            </summary>
            <param name="index">index</param>
            <returns>EQ2UIElement</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.ExamineItemWindow.GetPVPCheckbox">
            <summary>
            Returns a "checkbox" eq2uielement type.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ExamineItemWindow.NumTextVector">
            <summary>
            Number of "Texts" in the TextVector
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Extensions.Util">
            <summary>
            Utilities to facilitate manipulation of the LavishScriptObject index into C# datatypes
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.GroupMember">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to group members. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.GroupMember.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.GroupMember._effectiveLevel">
            <summary>
            Cache of EffectiveLevel
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.GroupMember._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.GroupMember._level">
            <summary>
            Cache of Level
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.GroupMember._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.GroupMember._petID">
            <summary>
            Cache of PetID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.GroupMember._race">
            <summary>
            Cache of Race
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Arcane">
            <summary>
            Arcane Affliction counter. A value of -1 indicates that the affliction is incurable.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Cursed">
            <summary>
            Cursed Counter. A value of -1 indicates that the affliction is incurable.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.EffectiveLevel">
            <summary>
            Effective Level (mentored or chrono)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Elemental">
            <summary>
            Elemental Affliction Counter. A value of -1 indicates that the affliction is incurable.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.HitPoints">
            <summary>
            Hit Points
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.IsAfflicted">
            <summary>
            Returns true if actor is afflicted by arcane, noxious, etc.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.MaxHitPoints">
            <summary>
            Max Hit Points
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.MaxPower">
            <summary>
            Max Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Noxious">
            <summary>
            Noxious Affliction Counter. A value of -1 indicates that the affliction is incurable.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.PetID">
            <summary>
            ID of the members pet, if any. A value of -1 indicates that there is no pet.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Power">
            <summary>
            Power
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Race">
            <summary>
            Race
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.RaidGroupNum">
            <summary>
            If in a raid, the group number 1-4. Otherwise NULL. 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.RaidRole">
            TODO: Test GroupMember.RaidRole
            <summary>
            Raid Role Assigned
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.ToActor">
            <summary>
            Accesses the Actor class of the GroupMember
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.Trauma">
            <summary>
            Trauma Affliction Counter. A value of -1 indicates that the affliction is incurable.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.GroupMember.ZoneName">
            <summary>
            Current Zone name
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.ISXEQ2">
            <summary>
            Represents all of the data available about ISXEQ2 itself
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.ISXEQ2._isReady">
            <summary>
            Cached value of IsReady
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.IsValidEQ2PressKey(System.String)">
            <summary>
            Returns a boolean indicating whether or not a key board key is a valid eq2press key
            </summary>
            <param name="keyName"></param>
            <returns>boolean indicating whether or not the key is valid</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.ISXEQ2._version">
            <summary>
            Cached value of Version
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.AddLoc(System.String)">
            <summary>
            Used to add an EQ2Location
            </summary>
            <param name="label">EQ2Location label</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.AddLoc(System.String,System.String)">
            <summary>
            Used to add an EQ2Location
            </summary>
            <param name="label">EQ2location label</param>
            <param name="notes">EQ2Location notes</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.ClearAbilitiesCache">
            <summary>
            Clears the abilities cache which means it will be rebuilt automatically when abilities are next used
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.DisableActorEvents">
            <summary>
            Disables Actor Events
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.DisableAfflictionEvents">
            <summary>
            Disables Affliction Events
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.EnableActorEvents">
            <summary>
            Enables Actor Events
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.EnableAfflictionEvents">
            <summary>
            Enables Affliction Events
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.EnduringBreath(EQ2.ISXEQ2.ISXEQ2.BenefitToggle)">
            <summary>
            Used to enable or disable Enduring Breath
            </summary>
            <param name="benefits">Enable or Disable</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.NoFog(EQ2.ISXEQ2.ISXEQ2.BenefitToggle)">
            <summary>
            Used to Enable or Disable No Fog
            </summary>
            <param name="benefits">Enable or Disable</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.Popup(System.String[])">
            <summary>
            Creates an ISXEQ2 popup window (LGUI window). Title and Status are optional.
            </summary>
            <param name="args">Title and/or Status</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.ResetInternalVendingSystem">
            <summary>
            This should be called in your script before doing any calls to the vendingcontainer datatype 
            that would be occurring after any user manipulation of the system within the game.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.SetActorEventsRange(System.Single)">
            <summary>
            Sets the range for Actor events
            </summary>
            <param name="range">range</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.SetActorEventsTimeInterval(System.Single)">
            <summary>
            Sets the time interval used to check for Actor events
            </summary>
            <param name="time">time in ms</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ISXEQ2.SetAfflictionEventsTimeInterval(System.Int32)">
            <summary>
            Sets the time period used to check for Affliction events
            </summary>
            <param name="time">time in ms</param>
        </member>
        <member name="P:EQ2.ISXEQ2.ISXEQ2.AfflictionEventsOn">
            <summary>
            Indicates whether or not Affliction Events are on or off
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ISXEQ2.EQ2LocsCount">
            <summary>
            Returns the total amount of EQ2Locations in the current zone
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ISXEQ2.EQ2LocsCountAllZones">
            <summary>
            Returns the total amount of EQ2Locations across all zones
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ISXEQ2.InitializingActorEffects">
            <summary>
            Indicates whether or not Actor Effects are initializing
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ISXEQ2.IsReady">
            <summary>
            Returns TRUE when the authentication and patching routines are complete and ISXEQ2 is truly ready.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ISXEQ2.Version">
            <summary>
            The ISXEQ2 version
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.ISXEQ2.BenefitToggle">
            <summary>
            Enum used as argument to toggle certain client based effects on or off
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.ISXEQ2.BenefitToggle.Enable">
            <summary>
            Enable
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.ISXEQ2.BenefitToggle.Disable">
            <summary>
            Disable
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Item">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to inventory and equipped items.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._appearanceOnly">
            <summary>
            Cache of AppearanceOnly
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._artifact">
            <summary>
            Cache of Artifact
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._attuneable">
            <summary>
            Cache of Attuneable
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._baseMaxDamage">
            <summary>
            Cache of BaseMaxDamage
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._baseMinDamage">
            <summary>
            Cache of BaseMinDamage
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._canBeRedeemed">
            <summary>
            Cache of CanBeRedeemed
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Class(System.Int32)">
            <summary>
            Returns a 'class' datatype -- # is the class number within the array 
            Abilities that are usable by ALL will have one class in the array, which will have the name "commoner".
            Remember, 'commoner' is a class of which everyone is a member 
            </summary>
            <param name="index">class index</param>
            <returns>class at index</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._condition">
            <summary>
            Cache of Condition
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._containerID">
            <summary>
            Cache of ContainerID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._crafter">
            <summary>
            Cache of Crafter
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._damageRating">
            <summary>
            Cache of DamageRating
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._damageType">
            <summary>
            Cache of DamageType
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._damageTypeVerb">
            <summary>
            Cache of DamageTypeVerb
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._delay">
            <summary>
            Cache of Delay
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._description">
            <summary>
            Cache of description
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.EffectName(System.Int32)">
            <summary>
            Name of Effect at index
            </summary>
            <param name="index">effect index</param>
            <returns>effect name</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.EffectDescription(System.Int32)">
            <summary>
            Description of the effect at index
            </summary>
            <param name="index">effect index</param>
            <returns>effect description</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.EquipSlot(System.Int32)">
            <summary>
            Returns the name of the equipslot at the index
            </summary>
            <param name="index">equipslot index</param>
            <returns>equipslot name</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._evil">
            <summary>
            Cache of Evil
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._examineText">
            <summary>
            Cache of ExamineText
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._good">
            <summary>
            Cache of Good
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._heirloom">
            <summary>
            Cache of Heirloom
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._index">
            <summary>
            Cache of Index
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._isActivatable">
            <summary>
            Cache of IsActivatable
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._isAutoConsumeable">
            <summary>
            Cache of IsAutoConsumeable
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._isCollectible">
            <summary>
            Cache of IsCollectible
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._isContainer">
            <summary>
            Cache of IsContainer
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._isFoodOrDrink">
            <summary>
            Cache of IsItemFoodOrDrink
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._isQuestItemUsable">
            <summary>
            Cache of IsQuestItemUsable
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._isScribeable">
            <summary>
            Cache of IsScribeable
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.IsSlotOpen(System.Int32)">
            <summary>
            Returns TRUE if the slot is open
            </summary>
            <param name="slot">slot number</param>
            <returns>TRUE if the slot is open</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.ItemInSlot(System.Int32)">
            <summary>
            Returns the item in the slot
            </summary>
            <param name="slot">slot number</param>
            <returns>item in the slot</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._label">
            <summary>
            Cache of Label
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._level">
            <summary>
            Cache of Level
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._linkID">
            <summary>
            Cache of LinkID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._lore">
            <summary>
            Cache of Lore
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._loreOnEquip">
            <summary>
            Cache of LoreOnEquip
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._masteryMinDamage">
            <summary>
            Cache of MasteryMinDamage
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._masteryMaxDamage">
            <summary>
            Cache of MasteryMaxDamage
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._maxCharges">
            <summary>
            Cache of MaxCharges
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._maxMitigation">
            <summary>
            Cache of MaxMitigation
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._maxProtection">
            <summary>
            Cache of MaxProtection
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._maxRange">
            <summary>
            Cache of MaxRange
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._minRange">
            <summary>
            Cache of MinRange
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._mitigation">
            <summary>
            Cache of Mitigation
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Modifier(System.Int32)">
            <summary>
            Retrieves the modifier at index between 1 and NumModifiers
            </summary>
            <param name="index">index</param>
            <returns>item modifier</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._noDestroy">
            <summary>
            Cache of NoDestroy
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._noTrade">
            <summary>
            Cache of NoTrade
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._noValue">
            <summary>
            Cache of NoValue
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._noZone">
            <summary>
            Cache of NoZone
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._numClasses">
            <summary>
            Cache of NumClasses
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._numEquipSlots">
            <summary>
            Cache of NumEquipSlots
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._numModifiers">
            <summary>
            Cache of NumModifiers
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._numSlots">
            <summary>
            Cache for NumSlots
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._offersQuest">
            <summary>
            Cache of OffersQuest
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._ornate">
            <summary>
            Cache of Ornate
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._protection">
            <summary>
            Cache of Protection
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._rentStatusReduction">
            <summary>
            Cache of RentStatusReduction
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._requiredByQuest">
            <summary>
            Cache of RequiredByQuest
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._satiation">
            <summary>
            Cache of Satiation
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._serialNumber">
            <summary>
            Cache of SerialNumber
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._subType">
            <summary>
            Cache of SubType
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._temporary">
            <summary>
            Cache of Temporary
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._tier">
            <summary>
            Cache of tier
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._type">
            <summary>
            Cache of Type
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item._wieldStyle">
            <summary>
            Cache of WieldStyle
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Activate">
            <summary>
            Activates the item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.AddToConsignment">
            <summary>
            Moves the entire item/stack to the first available vendor 
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.AddToConsignment(System.Int32)">
            <summary>
            Moves the quantity of the stack to the first available vendor 
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.AddToConsignment(System.Int32,System.Int32)">
            <summary>
            Moves the quantity of the stack to the vendor/vending container (1 to 6)
            </summary>
            <param name="quantity">quantity</param>
            <param name="vendorindex">index</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.AddToConsignment(System.Int32,System.Int32,System.Int64)">
            <summary>
            Moves the quantity of the stack to the vendor/vending container (1 to 6) to the stack with
            the stack serial number consignment
            </summary>
            <param name="quantity">quantity</param>
            <param name="vendorindex">index</param>
            <param name="stackwithserialnumber">serial number of target stack</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.AddToDepot(System.Int32)">
            <summary>
            Adds the item to a depot
            </summary>
            <param name="depotID">depot ID</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.AddToDepot(System.Int32,System.Int32)">
            <summary>
            Adds the quantity of the item to the depot
            </summary>
            <param name="depotID">depot ID</param>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.ApplyToItem(System.Int32)">
            <summary>
            Used to apply an item to another item
            </summary>
            <param name="itemID">target item id</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Consume">
            <summary>
            Consumes the item (Food/Drink)
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Destroy">
            <summary>
            Destroys Item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Destroy(System.Int32)">
            <summary>
            Destroys the quantity of an item if it is in a stack
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.DestroyWithConf">
            <summary>
            Destroys Item with Confirm On
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.EnchantItem(System.Int32)">
            <summary>
            Applies temporary enchantments after use
            </summary>
            <param name="itemID">target item ID</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Equip">
            <summary>
            Auto Equips the item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Examine">
            <summary>
            Examines the item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Initialize">
            <summary>
            Asks the server for information about the given item. Usually takes less than a second for the information to be cached to the client.
            (Note:  Most of the item datatype members require this.  The only exceptions are: Name, ID, IsEquipped, LinkID,
            ToLink, Index, InContainer, InContainerID, NumSlots, Slot, Quantity, IsContainer, ContainerID, InSharedBank, InBank, NumSlotsFree,
            IsSlotOpen, ItemInSlot, NextSlotOpen, InInventory, InInventorySlot, IsInventoryContainer, IsBankContainer, IsSharedBankContainer,
            InNoSaleContainer, IsAutoConsumeable, CanBeRedeemed, IsFoodOrDrink, CanScribeNow, IsScribeable, IsActivatable, IsReady, TimeUntilReady.)
            </summary>
            <returns>Function call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.InstallAsVendingContainer">
            <summary>
            Adds the item (which must be a vending container and must be in your inventory) to 
            your consignment system.  It will place the vending container into the first 
            free slot that is available.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item to a particular slot in a bag
            </summary>
            <param name="bagslot">slot</param>
            <param name="bagID">bag id</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a quantity of a stackable item to a particular slot in a container
            </summary>
            <param name="bagslot">slot</param>
            <param name="bagID">bag id</param>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Move(EQ2.ISXEQ2.Item.NextFreeType,System.Int32)">
            <summary>
            Moves the item(s) to the next free inventory slot of the selected type.
            (Use quantity = 0 for non-stackable items.)
            </summary>
            <param name="invtype">inventory type</param>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Open">
            <summary>
            Opens a container
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Sacrifice(System.Boolean)">
            <summary>
            Sacrifices the item
            </summary>
            <param name="withconfirm">with confirmation</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Scribe">
            <summary>
            Scribes the item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.SendAsGift">
            <summary>
            Attaches the item as a gift. Must be in a mail transaction.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.SendAsGift(System.Int32)">
            <summary>
            Attaches the quantity of a stackable item as a gift. Must be in a mail transaction.
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.ToggleAutoConsume">
            <summary>
            Toggles auto consume on and off. Check with AutoConsumeOn
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Transmute(System.Boolean)">
            <summary>
            Transmutes the item
            </summary>
            <param name="withconfirm">with confirmation</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.UnEquip">
            <summary>
            UnEquips the item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Item.Use">
            <summary>
            Uses the item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.AlreadyCollected">
            <summary>
            Returns TRUE if the collectible has already been collected.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.AppearanceOnly">
            <summary>
            Returns TRUE if the item is an Appearance Only item
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Artifact">
            <summary>
            Returns TRUE if the item is an artifact
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Attuneable">
            <summary>
            Returns TRUE if the item is attuneable
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Attuned">
            <summary>
            Returns TRUE if the item is attuned
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.AutoConsumeOn">
            <summary>
            Returns TRUE if Auto Consume is on
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.BaseMaxDamage">
            <summary>
            Base Maximum Weapon Damage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.BaseMinDamage">
            <summary>
            Base Minimum Weapon Damage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.CanBeRedeemed">
            <summary>
            Returns TRUE if the item can be redeemed
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.CanScribeNow">
            <summary>
            Returns TRUE if the item can be scribed right now
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.CastingTime">
            <summary>
            Item casting time
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Charges">
            <summary>
            Item Charges (-1 indicates unlimited)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Condition">
            <summary>
            Item condition (%)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.ContainerID">
            <summary>
            The Container ID of the container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.ContentsForSale">
            <summary>
            Containers Only. Returns TRUE if the contents of the container are for sale.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Crafter">
            <summary>
            The name of the crafter (if crafted item)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.DamageRating">
            <summary>
            Weapon Damage Rating
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.DamageType">
            <summary>
            Weapon Damage Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.DamageTypeVerb">
            <summary>
            Weapon Damage Type Verb (Slashing, etc...)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Delay">
            <summary>
            Weapon Delay
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Description">
            <summary>
            The description of the item. Not all items have a description.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Duration">
            <summary>
            Food or Drink Duration
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.EmptySlots">
            <summary>
            Containers only. The number of empty slots in the container.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Evil">
            <summary>
            Returns TRUE if item only usable by Evil characters
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.ExamineText">
            <summary>
            This is the text that appears in the examine window while 'examining' an item.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Good">
            <summary>
            Returns TRUE if item only usable by Good characters
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Heirloom">
            <summary>
            Returns TRUE if the item is Heirloom
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.ID">
            <summary>
            The ID of the item
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.InBank">
            <summary>
            Returns TRUE if the item is in the bank
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.InContainer">
            <summary>
            Returns TRUE if the item is in a container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.InContainerID">
            <summary>
            ID of parent container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Index">
            <summary>
            A number that represents a unique item number for an item.
            e.g. eq2execute "inventory equip 'ItemIndex' 'SlotNumber'"
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.InInventory">
            <summary>
            Identifies if the item is in a bag or actual inventory slot
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.InInventorySlot">
            <summary>
            Identifies if the item is in one of your 6 actual inventory slots
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.InNoSaleContainer">
            <summary>
            Returns TRUE if the item is in a nosale container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.InSharedBank">
            <summary>
            Returns TRUE if the item is in the shared bank
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsActivatable">
            <summary>
            Returns TRUE if the item is activatable
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsAutoConsumeable">
            <summary>
            Returns TRUE if the item is auto consumeable
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsBankContainer">
            <summary>
            Identifies if the item is a container placed in one of your 12 actual bank slots
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsCollectible">
            <summary>
            Returns TRUE if the item is a collectible
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsContainer">
            <summary>
            Returns TRUE if the item is a container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsEquipped">
            <summary>
            Returns TRUE if the item is equipped
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsFoodOrDrink">
            <summary>
            Returns TRUE if the item is a food or drink
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsInitialized">
            <summary>
            Returns true if all of this item's datatype members are available
            (i.e., if information has been cached from the server.)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsInventoryContainer">
            <summary>
            Identifies if the item is a container placed in one of your 6 actual inventory slots
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsQuestItemUsable">
            <summary>
            Returns TRUE if the item is a usable quest item
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsReady">
            <summary>
            Returns true if the IsActivatable == TRUE and the item is ready for use
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsScribeable">
            <summary>
            Returns TRUE if the item is scribeable
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.IsSharedBankContainer">
            <summary>
            Identifies if the item is a container placed in one of your 8 actual shared bank slots
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Label">
            <summary>
            Item Label (Container)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Level">
            <summary>
            Food/Drink Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.LinkID">
            <summary>
            The item LinkID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Lore">
            <summary>
            Returns TRUE if the item is lore
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.LoreOnEquip">
            <summary>
            Returns TRUE if the item becomes Lore if equipped
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MasteryMinDamage">
            <summary>
            Minimum Mastery Weapon Damage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MasteryMaxDamage">
            <summary>
            Maximum Mastery Weapon Damage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MaxCharges">
            <summary>
            Max Charges (-1 indicates unlimited)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MaxMitigation">
            <summary>
            Max Mitigation
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MaxProtection">
            <summary>
            MaxProtection
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MaxRange">
            <summary>
            Max Weapon Range
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MinRange">
            <summary>
            Min Weapon Range
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Mitigation">
            <summary>
            Mitigation
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MyMinDamage">
            <summary>
            Weapon Min Damage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.MyMaxDamage">
            <summary>
            Weapon Max Damage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NextSlotOpen">
            <summary>
            The next open slot in the container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NoDestroy">
            <summary>
            Returns TRUE if the item is no destroy
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NoTrade">
            <summary>
            Returns TRUE if the item is no trade
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NoValue">
            <summary>
            Returns TRUE if the item is no value
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NoZone">
            <summary>
            Returns TRUE if the item is no zone
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NumClasses">
            <summary>
            Returns the number of classes that can use the item
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NumEffects">
            <summary>
            The number of effects on the item
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NumEquipSlots">
            <summary>
            Returns the number of slots in which this item can be equipped 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NumModifiers">
            <summary>
            The number of item modifiers
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NumSlots">
            <summary>
            The number of slots in the container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.NumSlotsFree">
            <summary>
            Identifies the number of free slots in a container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.OffersQuest">
            <summary>
            Returns TRUE if the item offers a quest
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Ornate">
            <summary>
            Returns TRUE if the item is Ornate
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Protection">
            <summary>
            Protection
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Quantity">
            <summary>
            Item Quantity
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Range">
            <summary>
            Return MaxRange
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.RecastTime">
            <summary>
            Item Recast Time
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.RecoveryTime">
            <summary>
            Item Recovery Time
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.RentStatusReduction">
            <summary>
            Rent Status Reduction
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.RequiredByQuest">
            <summary>
            Returns TRUE if the item is required by a quest
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Satiation">
            <summary>
            Food or Drink satiation level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.SerialNumber">
            <summary>
            Item Serial Number
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Slot">
            <summary>
            Returns the current slot position for the item within its container, or within your inventory.
            So, if the item is in a bag that has 20 slots, it will return a number between 0 and 19.
            If the item (or container) is sitting in one of your six "real" inventory slots, it will return 0 to 5.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.SubType">
            <summary>
            Weapon Sub Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Temporary">
            <summary>
            Returns TRUE if the item is Temporary
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Tier">
            <summary>
            The tier of the item (FABLED, LEGENDARY, TREASURED, MASTERCRAFTED, HANDCRAFTED, or UNCOMMON)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.TimeUntilReady">
            <summary>
            Returns the time in seconds until the item is ready for use
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.ToLink">
            <summary>
            This will recreate the actual link used with in game chat channels (used typically with eq2echo or eq2execute).
            </summary>
            <returns>link</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.Type">
            <summary>
            Item type (Weapon, Armor, Shield, Container, Spell Scroll, Recipe Book, House Item, Food, Drink, or Activateable)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Item.WieldStyle">
            <summary>
            Wield Style (Returns: Dual Wield, Two-Handed, or One-Handed.)
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Item.NextFreeType">
            <summary>
            Inventory Types for the Move() Method
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item.NextFreeType.NextFreeNonBank">
            <summary>
            Non Bank Inventory
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Item.NextFreeType.NextFreeInBank">
            <summary>
            Bank Inventory
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.ItemModifier">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to modifiers on items. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ItemModifier.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.ItemModifier._subType">
            <summary>
            Cache of SubType
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.ItemModifier._type">
            <summary>
            Cache of Type
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.ItemModifier._value">
            <summary>
            Cache of Value
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ItemModifier.SubType">
            <summary>
            Modifier SubType
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ItemModifier.Type">
            <summary>
            Modifier Type
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ItemModifier.Value">
            <summary>
            Modifier Value
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions">
            <summary>
            Extensions to the LavishScriptObject Class
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetStringFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Returns the requested string member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject string member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetStringFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Returns the requested string member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of the arguments to pass to the member</param>
            <returns>LavishScriptObject string member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetInt64FromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Returns the requested Int64 member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject Int64 member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetUInt64FromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Returns the requested UInt64 member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject UInt64 member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetInt64FromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Returns the requested Int64 member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject Int64 member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetFloatFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested float member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject float member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetFloatFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested float member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject float member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetDoubleFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested double member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject double member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetDoubleFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested double member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject double member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetIntFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested integer member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject integer member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetUIntFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested unsigned integer member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject integer member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetIntFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested integer member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject integer member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetUIntFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested unsigned integer member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject integer member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetBoolFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retireves the requested boolean member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject boolean member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetBoolFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested boolean member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args"></param>
            <returns>LavishScriptObject boolean member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableInt64FromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Returns the requested Int64 member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject Int64 member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableInt64FromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Returns the requested Int64 member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject Int64 member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableFloatFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested float member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject float member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableFloatFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested float member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject float member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableDoubleFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested double member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject double member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableDoubleFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested double member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject double member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableIntFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested integer member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject integer member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableIntFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested integer member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args">string array of arguments to pass to the member</param>
            <returns>LavishScriptObject integer member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableBoolFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retireves the requested boolean member
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject boolean member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetNullableBoolFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String,System.String[])">
            <summary>
            Retrieves the requested boolean member based on the arguments provided
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <param name="args"></param>
            <returns>LavishScriptObject boolean member value</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Extensions.LavishScriptObjectExtensions.GetActorFromLSO(LavishScriptAPI.Interfaces.ILSObject,System.String)">
            <summary>
            Retrieves the requested Actor member based
            </summary>
            <param name="obj">this</param>
            <param name="member">the member to retrieve</param>
            <returns>LavishScriptObject Actor member value</returns>
        </member>
        <member name="T:EQ2.ISXEQ2.LootWindow">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to the "loot" window. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.Item(System.Int32)">
            <summary>
            Returns the item at the index provided. (From 1 to NumItems)
            </summary>
            <param name="index">index</param>
            <returns>Item</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.Item(System.String)">
            <summary>
            Returns the item that matches the substring name
            </summary>
            <param name="name">name</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.DeclineLotto">
            <summary>
            Declines the Lotto
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.DeclineNBG">
            <summary>
            Decline Need Before Greed
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.LootAll">
            <summary>
            Loots all items in loot window
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.LootItem">
            <summary>
            Loots the single item in the loot window. This method does
            not work for Lotto loot window, only for FreeForAll, LeaderOnly, or Solo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.LootItem(System.Int32,System.Boolean)">
            <summary>
            Attempts to loot the item with ID provided
            </summary>
            <param name="id">ID</param>
            <param name="lootNoTrade">Loot No Trade Items</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.RequestAll">
            <summary>
            Click Request All Button. Defaults to LootAll if no RequestAll button.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.SelectGreed">
            <summary>
            Selects the greed button
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.LootWindow.SelectNeed">
            <summary>
            Selects the need button
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.LootWindow.IsLotto">
            <summary>
            Returns TRUE if Lotto Loot
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.LootWindow.NumItems">
            <summary>
            The number of items in the loot window
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.LootWindow.ToEQ2UIPage">
            <summary>
            Returns the LootWindow as an EQ2UIPage
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.LootWindow.Type">
            <summary>
            Returns "Free For All" "Lottery" "Need Before Greed" or "Unknown" 
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Maintained">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to 
            maintained buffs or debuffs attributed to the current player character. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Maintained.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Maintained._concentrationCost">
            <summary>
            Cache of ConcentrationCost
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Maintained._isBeneficial">
            <summary>
            Cache of IsBeneficial
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Maintained._maxDuration">
            <summary>
            Cache of MaxDuration
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Maintained._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Maintained._type">
            <summary>
            Cache of Type
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Maintained.Cancel">
            <summary>
            Cancels the maintained effect, if possible
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Maintained.Examine">
            <summary>
            Examines the maintained effect
            </summary>
            <returns></returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.ConcentrationCost">
            <summary>
            Maintained effect concentration cost
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.CurrentIncrements">
            <summary>
            Returns the total number of increments of the maintained effect
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.Duration">
            <summary>
            This is the current duration of the buff/debuff in seconds. 
            Buffs/Debuffs that do not have a duration (ie, last forever) will return -1.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.IsBeneficial">
            <summary>
            Returns TRUE if teh maintained effect is beneficial (buff)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.MaxDuration">
            <summary>
            This is the current duration of the buff/debuff in seconds.
             Buffs/Debuffs that do not have a duration (ie, last forever) will return -1.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.Name">
            <summary>
            Maintained effect name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.Target">
            <summary>
            Returns the targget of the maintained buff.
            This only works for maintained buffs/debuffs that are of the "Type": 'single target'.
            If the Target is no longer alive or present in the game, it will return NULL.
            </summary>
            <returns>maintained effect target as actor</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Maintained.Type">
            <summary>
            This member returns one of the following strings: self only,pet only,group, or single target
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Merchandise">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to items that can be either bought from or sold to NPC or PC merchants.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Merchandise._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.Buy">
            <summary>
            Will try to buy 1 of an item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.Buy(System.Int32)">
            <summary>
            Will try to buy the quantity of an item.
            Quantity only works for items that are stackable. 
            If you try to buy more than MaxQuantity, Quantity will default to MaxQuantity.
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.Examine">
            <summary>
            This brings up the 'examine window' for the given item. 
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.ListForSale">
            <summary>
            This datatype method is used to set a piece of store merchandise to be 'for sale'. 
            Please note that you should test to see if the merchandise's bool IsForSale is
             already set or not before using this method in order to avoid sending bogus messages 
            to the server asking to set an item for sale that's already 'for sale'.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.Sell">
            <summary>
            Will try to buy 1 of the item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.Sell(System.Int32)">
            <summary>
            Will try to sell the quantity of the item.
            If you try sell more than the current quantity of that stack, 
            "Quantity#" will default to the current quantity of the stack. 
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.SetPrice(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This datatype method is used in conjunction with player stores in order to set the price of a piece of merchandise.
            The format is SetPrice[platinum,gold,silver,copper]. 
            </summary>
            <param name="platinum">platinum</param>
            <param name="gold">gold</param>
            <param name="silver">silver</param>
            <param name="copper">copper</param>
            <returns></returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Merchandise.UnListForSale">
            <summary>
            This datatype method is used to unlist a piece of store merchandise from the market.
            Please note that you should test to see if the merchandise's bool IsForSale is already
            set or not before using this method in order to avoid sending bogus messages to the 
            server asking to unlist an item that's not currently on the market in the first place.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.IsForSale">
            <summary>
            Returns FALSE if the "not for sale" checkbox/flag is selected for this item 
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.Level">
            <summary>
            Merchandise Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.LinkID">
            <summary>
            Link ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.MaxQuantity">
            <summary>
            For stackable items, this number will be the maximum number that a stack can hold. 
            Therefore, it is the maximum quantity of said item that can be bought at once.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.Price">
            <summary>
            The price of the item in silver pieces.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.PriceString">
            <summary>
            If the item has a status cost, then the format of this string will be #SP,#p,#g,#s,#c. 
            Otherwise, the format will be #p,#g,#s,#c
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.Quantity">
            <summary>
            Quantity Available
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.StatusCost">
            <summary>
            Status Cost
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Merchandise.ToLink">
            <summary>
            This will recreate the actual link used with in game chat channels (used typically with eq2echo or eq2execute).
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Radar">
            <summary>
            This DataType includes all of the data available through ISXEQ2 that is related to your radar. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.CustomFilter(System.Int32)">
            <summary>
            Returns the filter at the selected index
            </summary>
            <param name="index">the index</param>
            <returns>custom filter</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.ClipRadius">
            <summary>
            Toggles the custom filter "Clip Radius"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.ClipText">
            <summary>
            Toggles the custom filter "Show Text"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.ColorizeLabels">
            <summary>
            Toggles the custom filter "Show Con Color"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterAggroNPCs">
            <summary>
            Toggles the custom filter "Show Aggro"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterChests">
            <summary>
            Toggles the custom filter "Show Chests"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterCorpses">
            <summary>
            Toggles the custom filter "Show Corpses"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterDoors">
            <summary>
            Toggles the custom filter "Show Doors"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterMe">
            <summary>
            Toggles the custom filter "Show Me"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterMercenaries">
            <summary>
            Toggle the "Show Mercenaries" filter
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterMyPet">
            <summary>
            Toggles the custom filter "Show My Pet"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterNamedNPCs">
            <summary>
            Toggles the custom filter "Show Named"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterNoKillNPCs">
            <summary>
            Toggles the "Show NoKillNPCs" filter
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterNPCs">
            <summary>
            Toggles the custom filter "Show NPCs"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterPCs">
            <summary>
            Toggles the custom filter "Show PCs"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterPets">
            <summary>
            Toggles the custom filter "Show Pets"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterResources">
            <summary>
            Toggles the custom filter "Show Resources"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterSpecials">
            <summary>
            Toggles the custom filter "Show Specials"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterTSUnits">
            <summary>
            Toggles the custom filter "Show Tradeskill"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.FilterUnknowns">
            <summary>
            Toggles the custom filter "Show Unknowns"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.Rotation">
            <summary>
            Toggles radar rotation
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.SetCustomFilter(System.String)">
            <summary>
            Used to toggle a specific custom filter
            </summary>
            <param name="filter">The selected filter to toggle</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.SetSize(System.Int32)">
            <summary>
            Sets the "zoom" of the radar
            </summary>
            <param name="size">the new zoom</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.ShowLabels">
            <summary>
            Toggles the custom filter "Show Labels"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Radar.YAxisClipping">
            <summary>
            Toggles the custom filter "Y-axis Clipping"
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ClippingTextOn">
            <summary>
            True if text clipping is on
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ClipRadiusOn">
            <summary>
            True if radius clipping is on
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ColorizingLabels">
            <summary>
            True if labels are colorized
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.CustomFiltersList">
            <summary>
            A list of the custom filters in effect
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.Name">
            <summary>
            The name of the object on the radar
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.NumCustomFilters">
            <summary>
            Returns the number of filters active on the radar
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.RotationOn">
            <summary>
            True if radar rotation is on
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingAggroNPCs">
            <summary>
            True if the radar is displaying Aggro NPCs
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingChests">
            <summary>
            True if the radar is displating chests
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingCorpses">
            <summary>
            True if the radar is displaying corpses
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingDoors">
            <summary>
            True if the radar is showing doors
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingLabels">
            <summary>
            True if the radar is showing labels
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingMe">
            <summary>
            True if the radar is showing the client
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingMercenaries">
            <summary>
            True if Showing Mercenaries
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingMyPet">
            <summary>
            True if the radar is displaying client's pet
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingNamedNPCs">
            <summary>
            True if the radar is showing Named NPCs
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingNoKillNPCs">
            <summary>
            True if the radar is displaying NPCs that cannot be attacked
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingNPCs">
            <summary>
            True if the radar is showing NPCs
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingPCs">
            <summary>
            True if the radar is displaying PCs
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingPets">
            <summary>
            True if the radar is displaying pets
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingResources">
            <summary>
            True if the radar is showing Resources
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingSpecials">
            <summary>
            True if the radar is showing Specials
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingTSUnits">
            <summary>
            True if the radar is displaying Tradeskill units
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.ShowingUnknowns">
            <summary>
            True if the radar is displaying unknowns
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.Size">
            <summary>
            The value used for "zooming"
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Radar.YAxisClippingOn">
            <summary>
            True if Y Axis Clipping is on
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Recipe">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to tradeskill recipes.
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Recipe.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Recipe.Class(System.Int32)">
            <summary>
            Returns the class at the specified index
            </summary>
            <param name="index">index</param>
            <returns>Class</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._description">
            <summary>
            Cache of description
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._device">
            <summary>
            Cache of Device
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._knowledge">
            <summary>
            Cache of Knowledge
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._level">
            <summary>
            Cache of level
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._numClasses">
            <summary>
            Cache of NumClasses
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._primaryComponent">
            <summary>
            Cache of PrimaryComponent
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._recipeBook">
            <summary>
            Cache of RecipeBook
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Recipe._technique">
            <summary>
            Cache of Technique
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Recipe.Create">
            <summary>
            Begins creation of the recipe
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Recipe.Examine">
            <summary>
            Examines the recipe
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.BuildComponent1">
            <summary>
            A recipe component
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.BuildComponent2">
            <summary>
            A recipe component
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.BuildComponent3">
            <summary>
            A recipe component
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.BuildComponent4">
            <summary>
            A recipe component
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.Description">
            <summary>
            Recipe Description
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.Device">
            <summary>
            Tradeskill device to craft
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.Fuel">
            <summary>
            Fuel Component
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.ID">
            <summary>
            Recipe ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.Knowledge">
            <summary>
            Recipe knowledge
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.Level">
            <summary>
            Recipe level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.Name">
            <summary>
            Recipe name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.NumClasses">
            <summary>
            The number of classes that can use (used in Class(int index))
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.PrimaryComponent">
            <summary>
            The name of the primary component of the recipe
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.PrimaryComponentQuantityOnHand">
            <summary>
            Then quantity of primary component on hand
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.RecipeBook">
            <summary>
            The name of the recipe book for the recipe
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Recipe.Technique">
            <summary>
            Tradeskill technique needed
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.ReplyDialog">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to reply dialogs. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.ReplyDialog.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.ReplyDialog.Choose(System.Int32)">
            <summary>
            Selects the dialog by index.
            </summary>
            <param name="index">index</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.ReplyDialog.Select(System.Int32)">
            TODO:Find out if Select is Redundant
            <summary>
            Selects the dialog by index.
            </summary>
            <param name="index">index</param>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.ReplyDialog.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.ReplyDialog.ToEQ2UIPage">
            <summary>
            Returns the ReplyDialog as an EQ2UIPage
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.RewardWindow">
            <summary>
            Allows interaction with Reward Windows. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.RewardWindow.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.RewardWindow.Accept">
            <summary>
            Accepts the reward
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.RewardWindow.Cancel">
            <summary>
            Cancels the reward window
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.RewardWindow.Receive">
            <summary>
            Receives the reward
            </summary>
            <returns></returns>
        </member>
        <member name="P:EQ2.ISXEQ2.RewardWindow.ToEQ2UIPage">
            <summary>
            Returns the RewardWindow as an EQ2UIPage
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.VendingContainer">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to 
            containers/vending machines/actors that are held within the consignment system. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.VendingContainer.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.VendingContainer.Consignment(System.String)">
            <summary>
            Retrieves the consignment matching the supplied name
            </summary>
            <param name="name">name</param>
            <returns>Consignment</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.VendingContainer.Consignment(System.Int32)">
            <summary>
            Retrieves the consignment at the specified index (1 to NumItems)
            </summary>
            <param name="index">index</param>
            <returns>Consignment</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.VendingContainer._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.VendingContainer._serialNumber">
            <summary>
            Cache of SerialNumber
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.VendingContainer._totalCapacity">
            <summary>
            Cache of TotalCapacity
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.VendingContainer.ChangeTo">
            <summary>
            Selects this vending container
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.VendingContainer.Remove">
            <summary>
            Removes this vending container from the consignment system. 
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.VendingContainer.TakeCoin">
            <summary>
            Retrieves all of the money currently housed in that vendor.
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.VendingContainer.TakeCoin(System.Int32)">
            <summary>
            Retrieves the amount of coin specified (in silver pieces) from the vending container. 
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.CurrentCoin">
            <summary>
            Current value in silver pieces on container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.Market">
            <summary>
            Possible values: "Qeynos" "Freeport" "Kelethin" "Haven" "Neriak" (or "Unknown" which should not be possible)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.Name">
            <summary>
            Container Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.NumItems">
            <summary>
            Number of Consignments in container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.SerialNumber">
            <summary>
            Container Serial Number
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.TotalCapacity">
            <summary>
            Total Capacity of the container
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.TotalCoin">
            <summary>
            All time value in silver pieces
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendingContainer.UsedCapacity">
            <summary>
            Used Capacity (Free slots = Total - Used)
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Vendor">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to vendors within the game. 
            For the purposes of ISXEQ2, a vendor is any actor that is capable of selling and/or buying items. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.Broker(System.Int32)">
            <summary>
            This member returns a 'consignment' object that the broker is currently capable of selling (on the current 'Search
            Page' only) based upon the index of its location within the array.
            </summary>
            <param name="index">index</param>
            <returns>Consignment</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.Broker(System.String)">
            <summary>
            This member returns a 'consignment' object that the broker is currently capable of selling (on the current 'Search
            Page' only) based upon a substring of the item's name.
            </summary>
            <param name="name">name</param>
            <returns>Consignment</returns>
        </member>
        <member name="F:EQ2.ISXEQ2.Vendor._isBroker">
            <summary>
            Cache of IsBroker
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Vendor._isMerchant">
            <summary>
            Cache of IsMerchant
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.Item(System.Int32)">
            <summary>
            This member returns either a 'consignment' or 'merchandise' object that the 
            broker or vendor is currently capable of selling (on the current 'Search Page' 
            only, for broker) based upon the index. Only the members and methods they have
            in common are available.
            </summary>
            <param name="index">index</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.Item(System.String)">
            <summary>
            This member returns either a 'consignment' or 'merchandise' object that the 
            broker or vendor is currently capable of selling (on the current 'Search Page' 
            only, for broker) based upon an exact match of the item name. Only the members
            and methods they have in common are available.
            </summary>
            <param name="name">name</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.Merchant(System.Int32)">
            <summary>
            This member returns a 'merchandise' object that the merchant is currently capable of selling 
            (on the current 'Search Page' only) based upon the index of its location within the array. 
            </summary>
            <param name="index">index</param>
            <returns>Merchandise</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.Merchant(System.String)">
            <summary>
            This member returns a 'merchandise' object that the merchant is currently capable of selling 
            (on the current 'Search Page' only) based upon a substring of the item's name.
            </summary>
            <param name="name">name</param>
            <returns>Merchandise</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.Vendor.GoToSearchPage(System.Int32)">
            <summary>
            Selects the indicated page between 1 and TotalSearchPages (Broker Only)
            </summary>
            <param name="page">page</param>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.Vendor.Commission">
            <summary>
            Percent commission. Brokers Only. Non-Brokers will be zero.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Vendor.CurrentSearchPage">
            <summary>
            Current Search Page. Brokers only.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Vendor.IsBroker">
            <summary>
            Returns TRUE if the vendor is a broker (PC)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Vendor.IsMerchant">
            <summary>
            Returns TRUE if the vendor is a merchant (NPC)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Vendor.NumItemsForSale">
            <summary>
            Number of items for sale (use with Broker or Merchant 1 to NumItemsForSale)
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Vendor.TotalSearchPages">
            <summary>
            Total Number of Search Pages (Broker Only)
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.VendorItem">
            <summary>
            This class is a hybrid of the common members and methods of the Merchandise
            and Consignment DataTypes to allow the Item() Member of Vendor to work
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.VendorItem.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.VendorItem._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.VendorItem.Buy">
            <summary>
            Will try to buy 1 of an item
            </summary>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.VendorItem.Buy(System.Int32)">
            <summary>
            Will try to buy the quantity of an item.
            Quantity only works for items that are stackable. 
            Tf you try to buy more than a stack can hold, Quantity will default to max.
            </summary>
            <param name="quantity">quantity</param>
            <returns>call success</returns>
        </member>
        <member name="M:EQ2.ISXEQ2.VendorItem.Examine">
            <summary>
            This brings up the 'examine window' for the given item. 
            </summary>
            <returns>call success</returns>
        </member>
        <member name="P:EQ2.ISXEQ2.VendorItem.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendorItem.LinkID">
            <summary>
            Link ID
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendorItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendorItem.Price">
            <summary>
            The price of the item in silver pieces.
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendorItem.Quantity">
            <summary>
            Quantity Available
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.VendorItem.ToLink">
            <summary>
            This will recreate the actual link used with in game chat channels (used typically with eq2echo or eq2execute).
            </summary>
        </member>
        <member name="T:EQ2.ISXEQ2.Zone">
            <summary>
            This DataType includes all of the data available to ISXEQ2 that is related to the current zone. 
            </summary>
        </member>
        <member name="M:EQ2.ISXEQ2.Zone.#ctor(LavishScriptAPI.LavishScriptObject)">
            <summary>
            Constructor
            </summary>
            <param name="copy">LS Object</param>
        </member>
        <member name="F:EQ2.ISXEQ2.Zone._iD">
            <summary>
            Cache of ID
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Zone._name">
            <summary>
            Cache of Name
            </summary>
        </member>
        <member name="F:EQ2.ISXEQ2.Zone._shortName">
            <summary>
            Cache of ShortName
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Zone.ID">
            <summary>
            The ID of the zone
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Zone.Name">
            <summary>
            The name of the zone
            </summary>
        </member>
        <member name="P:EQ2.ISXEQ2.Zone.ShortName">
            <summary>
            The short name of the zone
            </summary>
        </member>
    </members>
</doc>
